import { Component, EventEmitter, Input, Output, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { timer } from 'rxjs';
export class CircleProgressOptions {
    constructor() {
        this.class = '';
        this.backgroundGradient = false;
        this.backgroundColor = 'transparent';
        this.backgroundGradientStopColor = 'transparent';
        this.backgroundOpacity = 1;
        this.backgroundStroke = 'transparent';
        this.backgroundStrokeWidth = 0;
        this.backgroundPadding = 5;
        this.percent = 0;
        this.radius = 90;
        this.space = 4;
        this.toFixed = 0;
        this.maxPercent = 1000;
        this.renderOnClick = true;
        this.units = '%';
        this.unitsFontSize = '10';
        this.unitsFontWeight = 'normal';
        this.unitsColor = '#444444';
        this.outerStrokeGradient = false;
        this.outerStrokeWidth = 8;
        this.outerStrokeColor = '#78C000';
        this.outerStrokeGradientStopColor = 'transparent';
        this.outerStrokeLinecap = 'round';
        this.innerStrokeColor = '#C7E596';
        this.innerStrokeWidth = 4;
        this.titleFormat = undefined;
        this.title = 'auto';
        this.titleColor = '#444444';
        this.titleFontSize = '20';
        this.titleFontWeight = 'normal';
        this.subtitleFormat = undefined;
        this.subtitle = 'progress';
        this.subtitleColor = '#A9A9A9';
        this.subtitleFontSize = '10';
        this.subtitleFontWeight = 'normal';
        this.imageSrc = undefined;
        this.imageHeight = undefined;
        this.imageWidth = undefined;
        this.animation = true;
        this.animateTitle = true;
        this.animateSubtitle = false;
        this.animationDuration = 500;
        this.showTitle = true;
        this.showSubtitle = true;
        this.showUnits = true;
        this.showImage = false;
        this.showBackground = true;
        this.showInnerStroke = true;
        this.clockwise = true;
        this.responsive = false;
        this.startFromZero = true;
        this.showZeroOuterStroke = true;
        this.lazy = false;
    }
}
/** @dynamic Prevent compiling error when using type `Document` https://github.com/angular/angular/issues/20351 */
export class CircleProgressComponent {
    constructor(defaultOptions, elRef, document) {
        this.elRef = elRef;
        this.document = document;
        this.onClick = new EventEmitter();
        // <svg> of component
        this.svgElement = null;
        // whether <svg> is in viewport
        this.isInViewport = false;
        // event for notifying viewport change caused by scrolling or resizing
        this.onViewportChanged = new EventEmitter;
        this._viewportChangedSubscriber = null;
        this.options = new CircleProgressOptions();
        this.defaultOptions = new CircleProgressOptions();
        this._lastPercent = 0;
        this._gradientUUID = null;
        this.render = () => {
            this.applyOptions();
            if (this.options.lazy) {
                // Draw svg if it doesn't exist
                this.svgElement === null && this.draw(this._lastPercent);
                // Draw it only when it's in the viewport
                if (this.isInViewport) {
                    // Draw it at the latest position when I am in.
                    if (this.options.animation && this.options.animationDuration > 0) {
                        this.animate(this._lastPercent, this.options.percent);
                    }
                    else {
                        this.draw(this.options.percent);
                    }
                    this._lastPercent = this.options.percent;
                }
            }
            else {
                if (this.options.animation && this.options.animationDuration > 0) {
                    this.animate(this._lastPercent, this.options.percent);
                }
                else {
                    this.draw(this.options.percent);
                }
                this._lastPercent = this.options.percent;
            }
        };
        this.polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {
            let angleInRadius = angleInDegrees * Math.PI / 180;
            let x = centerX + Math.sin(angleInRadius) * radius;
            let y = centerY - Math.cos(angleInRadius) * radius;
            return { x: x, y: y };
        };
        this.draw = (percent) => {
            // make percent reasonable
            percent = (percent === undefined) ? this.options.percent : Math.abs(percent);
            // circle percent shouldn't be greater than 100%.
            let circlePercent = (percent > 100) ? 100 : percent;
            // determine box size
            let boxSize = this.options.radius * 2 + this.options.outerStrokeWidth * 2;
            if (this.options.showBackground) {
                boxSize += (this.options.backgroundStrokeWidth * 2 + this.max(0, this.options.backgroundPadding * 2));
            }
            // the centre of the circle
            let centre = { x: boxSize / 2, y: boxSize / 2 };
            // the start point of the arc
            let startPoint = { x: centre.x, y: centre.y - this.options.radius };
            // get the end point of the arc
            let endPoint = this.polarToCartesian(centre.x, centre.y, this.options.radius, 360 * (this.options.clockwise ?
                circlePercent :
                (100 - circlePercent)) / 100); // ####################
            // We'll get an end point with the same [x, y] as the start point when percent is 100%, so move x a little bit.
            if (circlePercent === 100) {
                endPoint.x = endPoint.x + (this.options.clockwise ? -0.01 : +0.01);
            }
            // largeArcFlag and sweepFlag
            let largeArcFlag, sweepFlag;
            if (circlePercent > 50) {
                [largeArcFlag, sweepFlag] = this.options.clockwise ? [1, 1] : [1, 0];
            }
            else {
                [largeArcFlag, sweepFlag] = this.options.clockwise ? [0, 1] : [0, 0];
            }
            // percent may not equal the actual percent
            let titlePercent = this.options.animateTitle ? percent : this.options.percent;
            let titleTextPercent = titlePercent > this.options.maxPercent ?
                `${this.options.maxPercent.toFixed(this.options.toFixed)}+` : titlePercent.toFixed(this.options.toFixed);
            let subtitlePercent = this.options.animateSubtitle ? percent : this.options.percent;
            // get title object
            let title = {
                x: centre.x,
                y: centre.y,
                textAnchor: 'middle',
                color: this.options.titleColor,
                fontSize: this.options.titleFontSize,
                fontWeight: this.options.titleFontWeight,
                texts: [],
                tspans: []
            };
            // from v0.9.9, both title and titleFormat(...) may be an array of string.
            if (this.options.titleFormat !== undefined && this.options.titleFormat.constructor.name === 'Function') {
                let formatted = this.options.titleFormat(titlePercent);
                if (formatted instanceof Array) {
                    title.texts = [...formatted];
                }
                else {
                    title.texts.push(formatted.toString());
                }
            }
            else {
                if (this.options.title === 'auto') {
                    title.texts.push(titleTextPercent);
                }
                else {
                    if (this.options.title instanceof Array) {
                        title.texts = [...this.options.title];
                    }
                    else {
                        title.texts.push(this.options.title.toString());
                    }
                }
            }
            // get subtitle object
            let subtitle = {
                x: centre.x,
                y: centre.y,
                textAnchor: 'middle',
                color: this.options.subtitleColor,
                fontSize: this.options.subtitleFontSize,
                fontWeight: this.options.subtitleFontWeight,
                texts: [],
                tspans: []
            };
            // from v0.9.9, both subtitle and subtitleFormat(...) may be an array of string.
            if (this.options.subtitleFormat !== undefined && this.options.subtitleFormat.constructor.name === 'Function') {
                let formatted = this.options.subtitleFormat(subtitlePercent);
                if (formatted instanceof Array) {
                    subtitle.texts = [...formatted];
                }
                else {
                    subtitle.texts.push(formatted.toString());
                }
            }
            else {
                if (this.options.subtitle instanceof Array) {
                    subtitle.texts = [...this.options.subtitle];
                }
                else {
                    subtitle.texts.push(this.options.subtitle.toString());
                }
            }
            // get units object
            let units = {
                text: `${this.options.units}`,
                fontSize: this.options.unitsFontSize,
                fontWeight: this.options.unitsFontWeight,
                color: this.options.unitsColor
            };
            // get total count of text lines to be shown
            let rowCount = 0, rowNum = 1;
            this.options.showTitle && (rowCount += title.texts.length);
            this.options.showSubtitle && (rowCount += subtitle.texts.length);
            // calc dy for each tspan for title
            if (this.options.showTitle) {
                for (let span of title.texts) {
                    title.tspans.push({ span: span, dy: this.getRelativeY(rowNum, rowCount) });
                    rowNum++;
                }
            }
            // calc dy for each tspan for subtitle
            if (this.options.showSubtitle) {
                for (let span of subtitle.texts) {
                    subtitle.tspans.push({ span: span, dy: this.getRelativeY(rowNum, rowCount) });
                    rowNum++;
                }
            }
            // create ID for gradient element
            if (null === this._gradientUUID) {
                this._gradientUUID = this.uuid();
            }
            // Bring it all together
            this.svg = {
                viewBox: `0 0 ${boxSize} ${boxSize}`,
                // Set both width and height to '100%' if it's responsive
                width: this.options.responsive ? '100%' : boxSize,
                height: this.options.responsive ? '100%' : boxSize,
                backgroundCircle: {
                    cx: centre.x,
                    cy: centre.y,
                    r: this.options.radius + this.options.outerStrokeWidth / 2 + this.options.backgroundPadding,
                    fill: this.options.backgroundColor,
                    fillOpacity: this.options.backgroundOpacity,
                    stroke: this.options.backgroundStroke,
                    strokeWidth: this.options.backgroundStrokeWidth,
                },
                path: {
                    // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (https://developer.mozilla.org/en/docs/Web/SVG/Tutorial/Paths#Arcs)
                    d: `M ${startPoint.x} ${startPoint.y}
        A ${this.options.radius} ${this.options.radius} 0 ${largeArcFlag} ${sweepFlag} ${endPoint.x} ${endPoint.y}`,
                    stroke: this.options.outerStrokeColor,
                    strokeWidth: this.options.outerStrokeWidth,
                    strokeLinecap: this.options.outerStrokeLinecap,
                    fill: 'none'
                },
                circle: {
                    cx: centre.x,
                    cy: centre.y,
                    r: this.options.radius - this.options.space - this.options.outerStrokeWidth / 2 - this.options.innerStrokeWidth / 2,
                    fill: 'none',
                    stroke: this.options.innerStrokeColor,
                    strokeWidth: this.options.innerStrokeWidth,
                },
                title: title,
                units: units,
                subtitle: subtitle,
                image: {
                    x: centre.x - this.options.imageWidth / 2,
                    y: centre.y - this.options.imageHeight / 2,
                    src: this.options.imageSrc,
                    width: this.options.imageWidth,
                    height: this.options.imageHeight,
                },
                outerLinearGradient: {
                    id: 'outer-linear-' + this._gradientUUID,
                    colorStop1: this.options.outerStrokeColor,
                    colorStop2: this.options.outerStrokeGradientStopColor === 'transparent' ? '#FFF' : this.options.outerStrokeGradientStopColor,
                },
                radialGradient: {
                    id: 'radial-' + this._gradientUUID,
                    colorStop1: this.options.backgroundColor,
                    colorStop2: this.options.backgroundGradientStopColor === 'transparent' ? '#FFF' : this.options.backgroundGradientStopColor,
                }
            };
        };
        this.getAnimationParameters = (previousPercent, currentPercent) => {
            const MIN_INTERVAL = 10;
            let times, step, interval;
            let fromPercent = this.options.startFromZero ? 0 : (previousPercent < 0 ? 0 : previousPercent);
            let toPercent = currentPercent < 0 ? 0 : this.min(currentPercent, this.options.maxPercent);
            let delta = Math.abs(Math.round(toPercent - fromPercent));
            if (delta >= 100) {
                // we will finish animation in 100 times
                times = 100;
                if (!this.options.animateTitle && !this.options.animateSubtitle) {
                    step = 1;
                }
                else {
                    // show title or subtitle animation even if the arc is full, we also need to finish it in 100 times.
                    step = Math.round(delta / times);
                }
            }
            else {
                // we will finish in as many times as the number of percent.
                times = delta;
                step = 1;
            }
            // Get the interval of timer
            interval = Math.round(this.options.animationDuration / times);
            // Readjust all values if the interval of timer is extremely small.
            if (interval < MIN_INTERVAL) {
                interval = MIN_INTERVAL;
                times = this.options.animationDuration / interval;
                if (!this.options.animateTitle && !this.options.animateSubtitle && delta > 100) {
                    step = Math.round(100 / times);
                }
                else {
                    step = Math.round(delta / times);
                }
            }
            // step must be greater than 0.
            if (step < 1) {
                step = 1;
            }
            return { times: times, step: step, interval: interval };
        };
        this.animate = (previousPercent, currentPercent) => {
            if (this._timerSubscription && !this._timerSubscription.closed) {
                this._timerSubscription.unsubscribe();
            }
            let fromPercent = this.options.startFromZero ? 0 : previousPercent;
            let toPercent = currentPercent;
            let { step: step, interval: interval } = this.getAnimationParameters(fromPercent, toPercent);
            let count = fromPercent;
            if (fromPercent < toPercent) {
                this._timerSubscription = timer(0, interval).subscribe(() => {
                    count += step;
                    if (count <= toPercent) {
                        if (!this.options.animateTitle && !this.options.animateSubtitle && count >= 100) {
                            this.draw(toPercent);
                            this._timerSubscription.unsubscribe();
                        }
                        else {
                            this.draw(count);
                        }
                    }
                    else {
                        this.draw(toPercent);
                        this._timerSubscription.unsubscribe();
                    }
                });
            }
            else {
                this._timerSubscription = timer(0, interval).subscribe(() => {
                    count -= step;
                    if (count >= toPercent) {
                        if (!this.options.animateTitle && !this.options.animateSubtitle && toPercent >= 100) {
                            this.draw(toPercent);
                            this._timerSubscription.unsubscribe();
                        }
                        else {
                            this.draw(count);
                        }
                    }
                    else {
                        this.draw(toPercent);
                        this._timerSubscription.unsubscribe();
                    }
                });
            }
        };
        this.emitClickEvent = (event) => {
            if (this.options.renderOnClick) {
                this.animate(0, this.options.percent);
            }
            this.onClick.emit(event);
        };
        this.applyOptions = () => {
            // the options of <circle-progress> may change already
            for (let name of Object.keys(this.options)) {
                if (this.hasOwnProperty(name) && this[name] !== undefined) {
                    this.options[name] = this[name];
                }
                else if (this.templateOptions && this.templateOptions[name] !== undefined) {
                    this.options[name] = this.templateOptions[name];
                }
            }
            // make sure key options valid
            this.options.radius = Math.abs(+this.options.radius);
            this.options.space = +this.options.space;
            this.options.percent = +this.options.percent > 0 ? +this.options.percent : 0;
            this.options.maxPercent = Math.abs(+this.options.maxPercent);
            this.options.animationDuration = Math.abs(this.options.animationDuration);
            this.options.outerStrokeWidth = Math.abs(+this.options.outerStrokeWidth);
            this.options.innerStrokeWidth = Math.abs(+this.options.innerStrokeWidth);
            this.options.backgroundPadding = +this.options.backgroundPadding;
        };
        this.getRelativeY = (rowNum, rowCount) => {
            // why '-0.18em'? It's a magic number when property 'alignment-baseline' equals 'baseline'. :)
            let initialOffset = -0.18, offset = 1;
            return (initialOffset + offset * (rowNum - rowCount / 2)).toFixed(2) + 'em';
        };
        this.min = (a, b) => {
            return a < b ? a : b;
        };
        this.max = (a, b) => {
            return a > b ? a : b;
        };
        this.uuid = () => {
            // https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php
            var dt = new Date().getTime();
            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = (dt + Math.random() * 16) % 16 | 0;
                dt = Math.floor(dt / 16);
                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
            return uuid;
        };
        this.findSvgElement = function () {
            if (this.svgElement === null) {
                let tags = this.elRef.nativeElement.getElementsByTagName('svg');
                if (tags.length > 0) {
                    this.svgElement = tags[0];
                }
            }
        };
        this.checkViewport = () => {
            this.findSvgElement();
            let previousValue = this.isInViewport;
            this.isInViewport = this.isElementInViewport(this.svgElement);
            if (previousValue !== this.isInViewport) {
                this.onViewportChanged.emit({ oldValue: previousValue, newValue: this.isInViewport });
            }
        };
        this.onScroll = (event) => {
            this.checkViewport();
        };
        this.loadEventsForLazyMode = () => {
            if (this.options.lazy) {
                this.document.addEventListener('scroll', this.onScroll, true);
                this.window.addEventListener('resize', this.onScroll, true);
                if (this._viewportChangedSubscriber === null) {
                    this._viewportChangedSubscriber = this.onViewportChanged.subscribe(({ oldValue, newValue }) => {
                        newValue ? this.render() : null;
                    });
                }
                // svgElement must be created in DOM before being checked.
                // Is there a better way to check the existence of svgElemnt?
                let _timer = timer(0, 50).subscribe(() => {
                    this.svgElement === null ? this.checkViewport() : _timer.unsubscribe();
                });
            }
        };
        this.unloadEventsForLazyMode = () => {
            // Remove event listeners
            this.document.removeEventListener('scroll', this.onScroll, true);
            this.window.removeEventListener('resize', this.onScroll, true);
            // Unsubscribe onViewportChanged
            if (this._viewportChangedSubscriber !== null) {
                this._viewportChangedSubscriber.unsubscribe();
                this._viewportChangedSubscriber = null;
            }
        };
        this.document = document;
        this.window = this.document.defaultView;
        Object.assign(this.options, defaultOptions);
        Object.assign(this.defaultOptions, defaultOptions);
    }
    isDrawing() {
        return (this._timerSubscription && !this._timerSubscription.closed);
    }
    isElementInViewport(el) {
        // Return false if el has not been created in page.
        if (el === null || el === undefined)
            return false;
        // Check if the element is out of view due to a container scrolling
        let rect = el.getBoundingClientRect(), parent = el.parentNode, parentRect;
        do {
            parentRect = parent.getBoundingClientRect();
            if (rect.top >= parentRect.bottom)
                return false;
            if (rect.bottom <= parentRect.top)
                return false;
            if (rect.left >= parentRect.right)
                return false;
            if (rect.right <= parentRect.left)
                return false;
            parent = parent.parentNode;
        } while (parent != this.document.body);
        // Check its within the document viewport
        if (rect.top >= (this.window.innerHeight || this.document.documentElement.clientHeight))
            return false;
        if (rect.bottom <= 0)
            return false;
        if (rect.left >= (this.window.innerWidth || this.document.documentElement.clientWidth))
            return false;
        if (rect.right <= 0)
            return false;
        return true;
    }
    ngOnInit() {
        this.loadEventsForLazyMode();
    }
    ngOnDestroy() {
        this.unloadEventsForLazyMode();
    }
    ngOnChanges(changes) {
        this.render();
        if ('lazy' in changes) {
            changes.lazy.currentValue ? this.loadEventsForLazyMode() : this.unloadEventsForLazyMode();
        }
    }
}
CircleProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'circle-progress',
                template: `
        <svg xmlns="http://www.w3.org/2000/svg" *ngIf="svg"
             [attr.viewBox]="svg.viewBox" preserveAspectRatio="xMidYMid meet"
             [attr.height]="svg.height" [attr.width]="svg.width" (click)="emitClickEvent($event)" [attr.class]="options.class">
            <defs>
                <linearGradient *ngIf="options.outerStrokeGradient" [attr.id]="svg.outerLinearGradient.id">
                    <stop offset="5%" [attr.stop-color]="svg.outerLinearGradient.colorStop1"  [attr.stop-opacity]="1"/>
                    <stop offset="95%" [attr.stop-color]="svg.outerLinearGradient.colorStop2" [attr.stop-opacity]="1"/>
                </linearGradient>
                <radialGradient *ngIf="options.backgroundGradient" [attr.id]="svg.radialGradient.id">
                    <stop offset="5%" [attr.stop-color]="svg.radialGradient.colorStop1" [attr.stop-opacity]="1"/>
                    <stop offset="95%" [attr.stop-color]="svg.radialGradient.colorStop2" [attr.stop-opacity]="1"/>
                </radialGradient>
            </defs>
            <ng-container *ngIf="options.showBackground">
                <circle *ngIf="!options.backgroundGradient"
                        [attr.cx]="svg.backgroundCircle.cx"
                        [attr.cy]="svg.backgroundCircle.cy"
                        [attr.r]="svg.backgroundCircle.r"
                        [attr.fill]="svg.backgroundCircle.fill"
                        [attr.fill-opacity]="svg.backgroundCircle.fillOpacity"
                        [attr.stroke]="svg.backgroundCircle.stroke"
                        [attr.stroke-width]="svg.backgroundCircle.strokeWidth"/>
                <circle *ngIf="options.backgroundGradient"
                        [attr.cx]="svg.backgroundCircle.cx"
                        [attr.cy]="svg.backgroundCircle.cy"
                        [attr.r]="svg.backgroundCircle.r"
                        attr.fill="url({{window.location.href}}#{{svg.radialGradient.id}})"
                        [attr.fill-opacity]="svg.backgroundCircle.fillOpacity"
                        [attr.stroke]="svg.backgroundCircle.stroke"
                        [attr.stroke-width]="svg.backgroundCircle.strokeWidth"/>
            </ng-container>            
            <circle *ngIf="options.showInnerStroke"
                    [attr.cx]="svg.circle.cx"
                    [attr.cy]="svg.circle.cy"
                    [attr.r]="svg.circle.r"
                    [attr.fill]="svg.circle.fill"
                    [attr.stroke]="svg.circle.stroke"
                    [attr.stroke-width]="svg.circle.strokeWidth"/>
            <ng-container *ngIf="+options.percent!==0 || options.showZeroOuterStroke">
                <path *ngIf="!options.outerStrokeGradient"
                        [attr.d]="svg.path.d"
                        [attr.stroke]="svg.path.stroke"
                        [attr.stroke-width]="svg.path.strokeWidth"
                        [attr.stroke-linecap]="svg.path.strokeLinecap"
                        [attr.fill]="svg.path.fill"/>
                <path *ngIf="options.outerStrokeGradient"
                        [attr.d]="svg.path.d"
                        attr.stroke="url({{window.location.href}}#{{svg.outerLinearGradient.id}})"
                        [attr.stroke-width]="svg.path.strokeWidth"
                        [attr.stroke-linecap]="svg.path.strokeLinecap"
                        [attr.fill]="svg.path.fill"/>
            </ng-container>
            <text *ngIf="!options.showImage && (options.showTitle || options.showUnits || options.showSubtitle)"
                  alignment-baseline="baseline"
                  [attr.x]="svg.circle.cx"
                  [attr.y]="svg.circle.cy"
                  [attr.text-anchor]="svg.title.textAnchor">
                <ng-container *ngIf="options.showTitle">
                    <tspan *ngFor="let tspan of svg.title.tspans"
                           [attr.x]="svg.title.x"
                           [attr.y]="svg.title.y"
                           [attr.dy]="tspan.dy"
                           [attr.font-size]="svg.title.fontSize"
                           [attr.font-weight]="svg.title.fontWeight"
                           [attr.fill]="svg.title.color">{{tspan.span}}</tspan>
                </ng-container>
                <tspan *ngIf="options.showUnits"
                       [attr.font-size]="svg.units.fontSize"
                       [attr.font-weight]="svg.units.fontWeight"
                       [attr.fill]="svg.units.color">{{svg.units.text}}</tspan>
                <ng-container *ngIf="options.showSubtitle">
                    <tspan *ngFor="let tspan of svg.subtitle.tspans"
                           [attr.x]="svg.subtitle.x"
                           [attr.y]="svg.subtitle.y"
                           [attr.dy]="tspan.dy"
                           [attr.font-size]="svg.subtitle.fontSize"
                           [attr.font-weight]="svg.subtitle.fontWeight"
                           [attr.fill]="svg.subtitle.color">{{tspan.span}}</tspan>
                </ng-container>
            </text>
            <image *ngIf="options.showImage" preserveAspectRatio="none" 
                [attr.height]="svg.image.height"
                [attr.width]="svg.image.width"
                [attr.xlink:href]="svg.image.src"
                [attr.x]="svg.image.x"
                [attr.y]="svg.image.y"
            />
        </svg>
    `
            },] }
];
CircleProgressComponent.ctorParameters = () => [
    { type: CircleProgressOptions },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
CircleProgressComponent.propDecorators = {
    onClick: [{ type: Output }],
    name: [{ type: Input }],
    class: [{ type: Input }],
    backgroundGradient: [{ type: Input }],
    backgroundColor: [{ type: Input }],
    backgroundGradientStopColor: [{ type: Input }],
    backgroundOpacity: [{ type: Input }],
    backgroundStroke: [{ type: Input }],
    backgroundStrokeWidth: [{ type: Input }],
    backgroundPadding: [{ type: Input }],
    radius: [{ type: Input }],
    space: [{ type: Input }],
    percent: [{ type: Input }],
    toFixed: [{ type: Input }],
    maxPercent: [{ type: Input }],
    renderOnClick: [{ type: Input }],
    units: [{ type: Input }],
    unitsFontSize: [{ type: Input }],
    unitsFontWeight: [{ type: Input }],
    unitsColor: [{ type: Input }],
    outerStrokeGradient: [{ type: Input }],
    outerStrokeWidth: [{ type: Input }],
    outerStrokeColor: [{ type: Input }],
    outerStrokeGradientStopColor: [{ type: Input }],
    outerStrokeLinecap: [{ type: Input }],
    innerStrokeColor: [{ type: Input }],
    innerStrokeWidth: [{ type: Input }],
    titleFormat: [{ type: Input }],
    title: [{ type: Input }],
    titleColor: [{ type: Input }],
    titleFontSize: [{ type: Input }],
    titleFontWeight: [{ type: Input }],
    subtitleFormat: [{ type: Input }],
    subtitle: [{ type: Input }],
    subtitleColor: [{ type: Input }],
    subtitleFontSize: [{ type: Input }],
    subtitleFontWeight: [{ type: Input }],
    imageSrc: [{ type: Input }],
    imageHeight: [{ type: Input }],
    imageWidth: [{ type: Input }],
    animation: [{ type: Input }],
    animateTitle: [{ type: Input }],
    animateSubtitle: [{ type: Input }],
    animationDuration: [{ type: Input }],
    showTitle: [{ type: Input }],
    showSubtitle: [{ type: Input }],
    showUnits: [{ type: Input }],
    showImage: [{ type: Input }],
    showBackground: [{ type: Input }],
    showInnerStroke: [{ type: Input }],
    clockwise: [{ type: Input }],
    responsive: [{ type: Input }],
    startFromZero: [{ type: Input }],
    showZeroOuterStroke: [{ type: Input }],
    lazy: [{ type: Input }],
    templateOptions: [{ type: Input, args: ['options',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLXByb2dyZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jaXJjbGUtcHJvZ3Jlc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQUUsTUFBTSxFQUFxQixVQUFVLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3RJLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQWUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBMER6QyxNQUFNLE9BQU8scUJBQXFCO0lBQWxDO1FBQ0ksVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMzQixvQkFBZSxHQUFHLGFBQWEsQ0FBQztRQUNoQyxnQ0FBMkIsR0FBRyxhQUFhLENBQUM7UUFDNUMsc0JBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLHFCQUFnQixHQUFHLGFBQWEsQ0FBQztRQUNqQywwQkFBcUIsR0FBRyxDQUFDLENBQUM7UUFDMUIsc0JBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixXQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ1osVUFBSyxHQUFHLENBQUMsQ0FBQztRQUNWLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLFVBQUssR0FBRyxHQUFHLENBQUM7UUFDWixrQkFBYSxHQUFHLElBQUksQ0FBQztRQUNyQixvQkFBZSxHQUFHLFFBQVEsQ0FBQztRQUMzQixlQUFVLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUM1QixxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIscUJBQWdCLEdBQUcsU0FBUyxDQUFDO1FBQzdCLGlDQUE0QixHQUFHLGFBQWEsQ0FBQztRQUM3Qyx1QkFBa0IsR0FBRyxPQUFPLENBQUM7UUFDN0IscUJBQWdCLEdBQUcsU0FBUyxDQUFDO1FBQzdCLHFCQUFnQixHQUFHLENBQUMsQ0FBQztRQUNyQixnQkFBVyxHQUFHLFNBQVMsQ0FBQztRQUN4QixVQUFLLEdBQTJCLE1BQU0sQ0FBQztRQUN2QyxlQUFVLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLG9CQUFlLEdBQUcsUUFBUSxDQUFDO1FBQzNCLG1CQUFjLEdBQUcsU0FBUyxDQUFDO1FBQzNCLGFBQVEsR0FBMkIsVUFBVSxDQUFDO1FBQzlDLGtCQUFhLEdBQUcsU0FBUyxDQUFDO1FBQzFCLHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUN4Qix1QkFBa0IsR0FBRyxRQUFRLENBQUM7UUFDOUIsYUFBUSxHQUFHLFNBQVMsQ0FBQztRQUNyQixnQkFBVyxHQUFHLFNBQVMsQ0FBQztRQUN4QixlQUFVLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFDcEIsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFDeEIsc0JBQWlCLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFDcEIsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNqQixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLG9CQUFlLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixrQkFBYSxHQUFHLElBQUksQ0FBQztRQUNyQix3QkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDM0IsU0FBSSxHQUFHLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQUE7QUFFRCxrSEFBa0g7QUE4RmxILE1BQU0sT0FBTyx1QkFBdUI7SUFrZ0JoQyxZQUFZLGNBQXFDLEVBQVUsS0FBaUIsRUFBNEIsUUFBYTtRQUExRCxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQTRCLGFBQVEsR0FBUixRQUFRLENBQUs7UUFoZ0IzRyxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFxRTFELHFCQUFxQjtRQUNyQixlQUFVLEdBQWdCLElBQUksQ0FBQztRQUMvQiwrQkFBK0I7UUFDL0IsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFDOUIsc0VBQXNFO1FBQ3RFLHNCQUFpQixHQUF5RCxJQUFJLFlBQVksQ0FBQztRQUUzRiwrQkFBMEIsR0FBaUIsSUFBSSxDQUFDO1FBSWhELFlBQU8sR0FBMEIsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQzdELG1CQUFjLEdBQTBCLElBQUkscUJBQXFCLEVBQUUsQ0FBQztRQUNwRSxpQkFBWSxHQUFXLENBQUMsQ0FBQztRQUN6QixrQkFBYSxHQUFXLElBQUksQ0FBQztRQUM3QixXQUFNLEdBQUcsR0FBRyxFQUFFO1lBRVYsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBRXBCLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUM7Z0JBQ2pCLCtCQUErQjtnQkFDL0IsSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3pELHlDQUF5QztnQkFDekMsSUFBRyxJQUFJLENBQUMsWUFBWSxFQUFDO29CQUNqQiwrQ0FBK0M7b0JBQy9DLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLEVBQUU7d0JBQzlELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO3FCQUN6RDt5QkFBTTt3QkFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7cUJBQ25DO29CQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7aUJBQzVDO2FBQ0o7aUJBQU07Z0JBQ0gsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixHQUFHLENBQUMsRUFBRTtvQkFDOUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ3pEO3FCQUFNO29CQUNILElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDbkM7Z0JBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQzthQUM1QztRQUNMLENBQUMsQ0FBQztRQUNGLHFCQUFnQixHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWUsRUFBRSxNQUFjLEVBQUUsY0FBc0IsRUFBRSxFQUFFO1lBQzVGLElBQUksYUFBYSxHQUFHLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNuRCxJQUFJLENBQUMsR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxNQUFNLENBQUM7WUFDbkQsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsTUFBTSxDQUFDO1lBQ25ELE9BQU8sRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztRQUN4QixDQUFDLENBQUM7UUFDRixTQUFJLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRTtZQUN2QiwwQkFBMEI7WUFDMUIsT0FBTyxHQUFHLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3RSxpREFBaUQ7WUFDakQsSUFBSSxhQUFhLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ3BELHFCQUFxQjtZQUNyQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7WUFDMUUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRTtnQkFDN0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pHO1lBQ0QsMkJBQTJCO1lBQzNCLElBQUksTUFBTSxHQUFHLEVBQUMsQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLEVBQUMsQ0FBQztZQUM5Qyw2QkFBNkI7WUFDN0IsSUFBSSxVQUFVLEdBQUcsRUFBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDO1lBQ2xFLCtCQUErQjtZQUMvQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3pHLGFBQWEsQ0FBQyxDQUFDO2dCQUNmLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBRSx1QkFBdUI7WUFDM0QsK0dBQStHO1lBQy9HLElBQUksYUFBYSxLQUFLLEdBQUcsRUFBRTtnQkFDdkIsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3RFO1lBQ0QsNkJBQTZCO1lBQzdCLElBQUksWUFBaUIsRUFBRSxTQUFjLENBQUM7WUFDdEMsSUFBSSxhQUFhLEdBQUcsRUFBRSxFQUFFO2dCQUNwQixDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3hFO2lCQUFNO2dCQUNILENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDeEU7WUFDRCwyQ0FBMkM7WUFDM0MsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDOUUsSUFBSSxnQkFBZ0IsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDM0QsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0csSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDcEYsbUJBQW1CO1lBQ25CLElBQUksS0FBSyxHQUFHO2dCQUNSLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDWCxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ1gsVUFBVSxFQUFFLFFBQVE7Z0JBQ3BCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVU7Z0JBQzlCLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7Z0JBQ3BDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWU7Z0JBQ3hDLEtBQUssRUFBRSxFQUFFO2dCQUNULE1BQU0sRUFBRSxFQUFFO2FBQ2IsQ0FBQztZQUNGLDBFQUEwRTtZQUMxRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtnQkFDcEcsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3ZELElBQUksU0FBUyxZQUFZLEtBQUssRUFBRTtvQkFDNUIsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7aUJBQ2hDO3FCQUFNO29CQUNILEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2lCQUMxQzthQUNKO2lCQUFNO2dCQUNILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssTUFBTSxFQUFFO29CQUMvQixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2lCQUN0QztxQkFBTTtvQkFDSCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxZQUFZLEtBQUssRUFBRTt3QkFDckMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtxQkFDeEM7eUJBQU07d0JBQ0gsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztxQkFDbkQ7aUJBQ0o7YUFDSjtZQUNELHNCQUFzQjtZQUN0QixJQUFJLFFBQVEsR0FBRztnQkFDWCxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ1gsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNYLFVBQVUsRUFBRSxRQUFRO2dCQUNwQixLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhO2dCQUNqQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0I7Z0JBQ3ZDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQjtnQkFDM0MsS0FBSyxFQUFFLEVBQUU7Z0JBQ1QsTUFBTSxFQUFFLEVBQUU7YUFDYixDQUFBO1lBQ0QsZ0ZBQWdGO1lBQ2hGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFO2dCQUMxRyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxTQUFTLFlBQVksS0FBSyxFQUFFO29CQUM1QixRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztpQkFDbkM7cUJBQU07b0JBQ0gsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7aUJBQzdDO2FBQ0o7aUJBQU07Z0JBQ0gsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsWUFBWSxLQUFLLEVBQUU7b0JBQ3hDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7aUJBQzlDO3FCQUFNO29CQUNILFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7aUJBQ3pEO2FBQ0o7WUFDRCxtQkFBbUI7WUFDbkIsSUFBSSxLQUFLLEdBQUc7Z0JBQ1IsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQzdCLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7Z0JBQ3BDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWU7Z0JBQ3hDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVU7YUFDakMsQ0FBQztZQUNGLDRDQUE0QztZQUM1QyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakUsbUNBQW1DO1lBQ25DLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3hCLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtvQkFDMUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsRUFBQyxDQUFDLENBQUM7b0JBQ3pFLE1BQU0sRUFBRSxDQUFDO2lCQUNaO2FBQ0o7WUFDRCxzQ0FBc0M7WUFDdEMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtnQkFDM0IsS0FBSyxJQUFJLElBQUksSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO29CQUM3QixRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFDLENBQUMsQ0FBQTtvQkFDM0UsTUFBTSxFQUFFLENBQUM7aUJBQ1o7YUFDSjtZQUNELGlDQUFpQztZQUNqQyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFDO2dCQUM1QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNwQztZQUNELHdCQUF3QjtZQUN4QixJQUFJLENBQUMsR0FBRyxHQUFHO2dCQUNQLE9BQU8sRUFBRSxPQUFPLE9BQU8sSUFBSSxPQUFPLEVBQUU7Z0JBQ3BDLHlEQUF5RDtnQkFDekQsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU87Z0JBQ2pELE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPO2dCQUNsRCxnQkFBZ0IsRUFBRTtvQkFDZCxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ1osRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUNaLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQjtvQkFDM0YsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZTtvQkFDbEMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCO29CQUMzQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0I7b0JBQ3JDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQjtpQkFDbEQ7Z0JBQ0QsSUFBSSxFQUFFO29CQUNGLDRIQUE0SDtvQkFDNUgsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sTUFBTSxZQUFZLElBQUksU0FBUyxJQUFJLFFBQVEsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsRUFBRTtvQkFDbkcsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCO29CQUNyQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0I7b0JBQzFDLGFBQWEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQjtvQkFDOUMsSUFBSSxFQUFFLE1BQU07aUJBQ2Y7Z0JBQ0QsTUFBTSxFQUFFO29CQUNKLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDWixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ1osQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQztvQkFDbkgsSUFBSSxFQUFFLE1BQU07b0JBQ1osTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCO29CQUNyQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0I7aUJBQzdDO2dCQUNELEtBQUssRUFBRSxLQUFLO2dCQUNaLEtBQUssRUFBRSxLQUFLO2dCQUNaLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixLQUFLLEVBQUU7b0JBQ0gsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsQ0FBQztvQkFDekMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQztvQkFDMUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUTtvQkFDMUIsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVTtvQkFDOUIsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVztpQkFDbkM7Z0JBQ0QsbUJBQW1CLEVBQUU7b0JBQ2pCLEVBQUUsRUFBRSxlQUFlLEdBQUcsSUFBSSxDQUFDLGFBQWE7b0JBQ3hDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtvQkFDekMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCO2lCQUMvSDtnQkFDRCxjQUFjLEVBQUU7b0JBQ1osRUFBRSxFQUFFLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYTtvQkFDbEMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZTtvQkFDeEMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsMkJBQTJCLEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsMkJBQTJCO2lCQUM3SDthQUNKLENBQUM7UUFDTixDQUFDLENBQUM7UUFDRiwyQkFBc0IsR0FBRyxDQUFDLGVBQXVCLEVBQUUsY0FBc0IsRUFBRSxFQUFFO1lBQ3pFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztZQUN4QixJQUFJLEtBQWEsRUFBRSxJQUFZLEVBQUUsUUFBZ0IsQ0FBQztZQUNsRCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDL0YsSUFBSSxTQUFTLEdBQUcsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNGLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUUxRCxJQUFJLEtBQUssSUFBSSxHQUFHLEVBQUU7Z0JBQ2Qsd0NBQXdDO2dCQUN4QyxLQUFLLEdBQUcsR0FBRyxDQUFDO2dCQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFO29CQUM3RCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNaO3FCQUFNO29CQUNILG9HQUFvRztvQkFDcEcsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO2lCQUNwQzthQUNKO2lCQUFNO2dCQUNILDREQUE0RDtnQkFDNUQsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDZCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2FBQ1o7WUFDRCw0QkFBNEI7WUFDNUIsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUM5RCxtRUFBbUU7WUFDbkUsSUFBSSxRQUFRLEdBQUcsWUFBWSxFQUFFO2dCQUN6QixRQUFRLEdBQUcsWUFBWSxDQUFDO2dCQUN4QixLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUM7Z0JBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7b0JBQzVFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQztpQkFDbEM7cUJBQU07b0JBQ0gsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO2lCQUNwQzthQUNKO1lBQ0QsK0JBQStCO1lBQy9CLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtnQkFDVixJQUFJLEdBQUcsQ0FBQyxDQUFDO2FBQ1o7WUFDRCxPQUFPLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUM7UUFDRixZQUFPLEdBQUcsQ0FBQyxlQUF1QixFQUFFLGNBQXNCLEVBQUUsRUFBRTtZQUMxRCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUU7Z0JBQzVELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUN6QztZQUNELElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztZQUNuRSxJQUFJLFNBQVMsR0FBRyxjQUFjLENBQUM7WUFDL0IsSUFBSSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBQyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDM0YsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDO1lBQ3hCLElBQUcsV0FBVyxHQUFHLFNBQVMsRUFBQztnQkFDdkIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtvQkFDeEQsS0FBSyxJQUFJLElBQUksQ0FBQztvQkFDZCxJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7d0JBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLEtBQUssSUFBSSxHQUFHLEVBQUU7NEJBQzdFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7NEJBQ3JCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQzt5QkFDekM7NkJBQU07NEJBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzt5QkFDcEI7cUJBQ0o7eUJBQU07d0JBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDckIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO3FCQUN6QztnQkFDTCxDQUFDLENBQUMsQ0FBQzthQUNOO2lCQUFJO2dCQUNELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7b0JBQ3hELEtBQUssSUFBSSxJQUFJLENBQUM7b0JBQ2QsSUFBSSxLQUFLLElBQUksU0FBUyxFQUFFO3dCQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsSUFBSSxTQUFTLElBQUksR0FBRyxFQUFFOzRCQUNqRixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzRCQUNyQixJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7eUJBQ3pDOzZCQUFNOzRCQUNILElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7eUJBQ3BCO3FCQUNKO3lCQUFNO3dCQUNILElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQ3JCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztxQkFDekM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7YUFDTjtRQUNMLENBQUMsQ0FBQztRQUNGLG1CQUFjLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUM1QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO2dCQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3pDO1lBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBRU0saUJBQVksR0FBRyxHQUFHLEVBQUU7WUFDeEIsc0RBQXNEO1lBQ3RELEtBQUssSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3hDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDbkM7cUJBQU0sSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUN6RSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ25EO2FBQ0o7WUFDRCw4QkFBOEI7WUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDMUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUN6RSxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUNyRSxDQUFDLENBQUM7UUFDTSxpQkFBWSxHQUFHLENBQUMsTUFBYyxFQUFFLFFBQWdCLEVBQVUsRUFBRTtZQUNoRSw4RkFBOEY7WUFDOUYsSUFBSSxhQUFhLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUN0QyxPQUFPLENBQUMsYUFBYSxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hGLENBQUMsQ0FBQztRQUVNLFFBQUcsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRTtZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQztRQUVNLFFBQUcsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRTtZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQztRQUVNLFNBQUksR0FBRyxHQUFHLEVBQUU7WUFDaEIsa0ZBQWtGO1lBQ2xGLElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDOUIsSUFBSSxJQUFJLEdBQUcsc0NBQXNDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxVQUFTLENBQUM7Z0JBQ3pFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBQyxFQUFFLENBQUMsR0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUN2QyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZCLE9BQU8sQ0FBQyxDQUFDLElBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNsRCxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQTtRQU1NLG1CQUFjLEdBQUc7WUFDcEIsSUFBRyxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksRUFBQztnQkFDeEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2hFLElBQUcsSUFBSSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUM7b0JBQ2IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzdCO2FBQ0o7UUFDTCxDQUFDLENBQUE7UUF1QkQsa0JBQWEsR0FBRyxHQUFHLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RCLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzlELElBQUcsYUFBYSxLQUFLLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBQyxRQUFRLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQzthQUN2RjtRQUNMLENBQUMsQ0FBQTtRQUVELGFBQVEsR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUE7UUFFRCwwQkFBcUIsR0FBRyxHQUFHLEVBQUU7WUFDekIsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBQztnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDNUQsSUFBRyxJQUFJLENBQUMsMEJBQTBCLEtBQUssSUFBSSxFQUFDO29CQUN4QyxJQUFJLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBQyxFQUFFLEVBQUU7d0JBQ3hGLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3BDLENBQUMsQ0FBQyxDQUFDO2lCQUNOO2dCQUNELDBEQUEwRDtnQkFDMUQsNkRBQTZEO2dCQUM3RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFFLEVBQUU7b0JBQ3BDLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDM0UsQ0FBQyxDQUFDLENBQUE7YUFDTDtRQUNMLENBQUMsQ0FBQTtRQUVELDRCQUF1QixHQUFHLEdBQUcsRUFBRTtZQUMzQix5QkFBeUI7WUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQy9ELGdDQUFnQztZQUNoQyxJQUFHLElBQUksQ0FBQywwQkFBMEIsS0FBSyxJQUFJLEVBQUM7Z0JBQ3hDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDOUMsSUFBSSxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQzthQUMxQztRQUNMLENBQUMsQ0FBQTtRQXFCRyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQWxHTSxTQUFTO1FBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBV08sbUJBQW1CLENBQUUsRUFBRTtRQUMzQixtREFBbUQ7UUFDbkQsSUFBRyxFQUFFLEtBQUssSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDakQsbUVBQW1FO1FBQ25FLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztRQUMxRSxHQUFHO1lBQ0QsVUFBVSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1lBQzVDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTTtnQkFBRSxPQUFPLEtBQUssQ0FBQztZQUNoRCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLEdBQUc7Z0JBQUUsT0FBTyxLQUFLLENBQUM7WUFDaEQsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxLQUFLO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1lBQ2hELElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxVQUFVLENBQUMsSUFBSTtnQkFBRSxPQUFPLEtBQUssQ0FBQztZQUNoRCxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztTQUM1QixRQUFRLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtRQUN2Qyx5Q0FBeUM7UUFDekMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDdEcsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUNyRyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUEyQ0QsUUFBUTtRQUNKLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUU5QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFZCxJQUFHLE1BQU0sSUFBSSxPQUFPLEVBQUM7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztTQUM3RjtJQUVMLENBQUM7OztZQTdsQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F5RlQ7YUFDSjs7O1lBbWdCK0IscUJBQXFCO1lBcHRCaUMsVUFBVTs0Q0FvdEJiLE1BQU0sU0FBQyxRQUFROzs7c0JBaGdCN0YsTUFBTTttQkFFTixLQUFLO29CQUNMLEtBQUs7aUNBQ0wsS0FBSzs4QkFDTCxLQUFLOzBDQUNMLEtBQUs7Z0NBQ0wsS0FBSzsrQkFDTCxLQUFLO29DQUNMLEtBQUs7Z0NBQ0wsS0FBSztxQkFFTCxLQUFLO29CQUNMLEtBQUs7c0JBQ0wsS0FBSztzQkFDTCxLQUFLO3lCQUNMLEtBQUs7NEJBQ0wsS0FBSztvQkFFTCxLQUFLOzRCQUNMLEtBQUs7OEJBQ0wsS0FBSzt5QkFDTCxLQUFLO2tDQUVMLEtBQUs7K0JBQ0wsS0FBSzsrQkFDTCxLQUFLOzJDQUNMLEtBQUs7aUNBQ0wsS0FBSzsrQkFFTCxLQUFLOytCQUNMLEtBQUs7MEJBRUwsS0FBSztvQkFDTCxLQUFLO3lCQUNMLEtBQUs7NEJBQ0wsS0FBSzs4QkFDTCxLQUFLOzZCQUVMLEtBQUs7dUJBQ0wsS0FBSzs0QkFDTCxLQUFLOytCQUNMLEtBQUs7aUNBQ0wsS0FBSzt1QkFFTCxLQUFLOzBCQUNMLEtBQUs7eUJBQ0wsS0FBSzt3QkFFTCxLQUFLOzJCQUNMLEtBQUs7OEJBQ0wsS0FBSztnQ0FDTCxLQUFLO3dCQUVMLEtBQUs7MkJBQ0wsS0FBSzt3QkFDTCxLQUFLO3dCQUNMLEtBQUs7NkJBQ0wsS0FBSzs4QkFDTCxLQUFLO3dCQUNMLEtBQUs7eUJBQ0wsS0FBSzs0QkFDTCxLQUFLO2tDQUNMLEtBQUs7bUJBRUwsS0FBSzs4QkFFTCxLQUFLLFNBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgSW5qZWN0LCBPbkluaXQsIE9uRGVzdHJveSwgRWxlbWVudFJlZiwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtTdWJzY3JpcHRpb24sIHRpbWVyfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBDaXJjbGVQcm9ncmVzc09wdGlvbnNJbnRlcmZhY2Uge1xuICAgIGNsYXNzPzogc3RyaW5nO1xuICAgIGJhY2tncm91bmRHcmFkaWVudD86IGJvb2xlYW47XG4gICAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIGJhY2tncm91bmRHcmFkaWVudFN0b3BDb2xvcj86IHN0cmluZztcbiAgICBiYWNrZ3JvdW5kT3BhY2l0eT86IG51bWJlcjtcbiAgICBiYWNrZ3JvdW5kU3Ryb2tlPzogc3RyaW5nO1xuICAgIGJhY2tncm91bmRTdHJva2VXaWR0aD86IG51bWJlcjtcbiAgICBiYWNrZ3JvdW5kUGFkZGluZz86IG51bWJlcjtcbiAgICBwZXJjZW50PzogbnVtYmVyO1xuICAgIHJhZGl1cz86IG51bWJlcjtcbiAgICBzcGFjZT86IG51bWJlcjtcbiAgICB0b0ZpeGVkPzogbnVtYmVyO1xuICAgIG1heFBlcmNlbnQ/OiBudW1iZXI7XG4gICAgcmVuZGVyT25DbGljaz86IGJvb2xlYW47XG4gICAgdW5pdHM/OiBzdHJpbmc7XG4gICAgdW5pdHNGb250U2l6ZT86IHN0cmluZztcbiAgICB1bml0c0ZvbnRXZWlnaHQ/OiBzdHJpbmc7XG4gICAgdW5pdHNDb2xvcj86IHN0cmluZztcbiAgICBvdXRlclN0cm9rZUdyYWRpZW50PzogYm9vbGVhbjtcbiAgICBvdXRlclN0cm9rZVdpZHRoPzogbnVtYmVyO1xuICAgIG91dGVyU3Ryb2tlQ29sb3I/OiBzdHJpbmc7XG4gICAgb3V0ZXJTdHJva2VHcmFkaWVudFN0b3BDb2xvcj86IHN0cmluZztcbiAgICBvdXRlclN0cm9rZUxpbmVjYXA/OiBzdHJpbmc7XG4gICAgaW5uZXJTdHJva2VDb2xvcj86IHN0cmluZztcbiAgICBpbm5lclN0cm9rZVdpZHRoPzogbnVtYmVyO1xuICAgIHRpdGxlRm9ybWF0PzogRnVuY3Rpb247XG4gICAgdGl0bGU/OiBzdHJpbmcgfCBBcnJheTxTdHJpbmc+O1xuICAgIHRpdGxlQ29sb3I/OiBzdHJpbmc7XG4gICAgdGl0bGVGb250U2l6ZT86IHN0cmluZztcbiAgICB0aXRsZUZvbnRXZWlnaHQ/OiBzdHJpbmc7XG4gICAgc3VidGl0bGVGb3JtYXQ/OiBGdW5jdGlvbjtcbiAgICBzdWJ0aXRsZT86IHN0cmluZyB8IEFycmF5PFN0cmluZz47XG4gICAgc3VidGl0bGVDb2xvcj86IHN0cmluZztcbiAgICBzdWJ0aXRsZUZvbnRTaXplPzogc3RyaW5nO1xuICAgIHN1YnRpdGxlRm9udFdlaWdodD86IHN0cmluZztcbiAgICBpbWFnZVNyYz86IHN0cmluZztcbiAgICBpbWFnZUhlaWdodD86IG51bWJlcjtcbiAgICBpbWFnZVdpZHRoPzogbnVtYmVyOyAgICBcbiAgICBhbmltYXRpb24/OiBib29sZWFuO1xuICAgIGFuaW1hdGVUaXRsZT86IGJvb2xlYW47XG4gICAgYW5pbWF0ZVN1YnRpdGxlPzogYm9vbGVhbjtcbiAgICBhbmltYXRpb25EdXJhdGlvbj86IG51bWJlcjtcbiAgICBzaG93VGl0bGU/OiBib29sZWFuO1xuICAgIHNob3dTdWJ0aXRsZT86IGJvb2xlYW47XG4gICAgc2hvd1VuaXRzPzogYm9vbGVhbjtcbiAgICBzaG93SW1hZ2U/OiBib29sZWFuO1xuICAgIHNob3dCYWNrZ3JvdW5kPzogYm9vbGVhbjtcbiAgICBzaG93SW5uZXJTdHJva2U/OiBib29sZWFuO1xuICAgIGNsb2Nrd2lzZT86IGJvb2xlYW47XG4gICAgcmVzcG9uc2l2ZT86IGJvb2xlYW47XG4gICAgc3RhcnRGcm9tWmVybz86IGJvb2xlYW47XG4gICAgc2hvd1plcm9PdXRlclN0cm9rZT86IGJvb2xlYW47XG4gICAgbGF6eT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBDaXJjbGVQcm9ncmVzc09wdGlvbnMgaW1wbGVtZW50cyBDaXJjbGVQcm9ncmVzc09wdGlvbnNJbnRlcmZhY2Uge1xuICAgIGNsYXNzID0gJyc7XG4gICAgYmFja2dyb3VuZEdyYWRpZW50ID0gZmFsc2U7XG4gICAgYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgICBiYWNrZ3JvdW5kR3JhZGllbnRTdG9wQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xuICAgIGJhY2tncm91bmRPcGFjaXR5ID0gMTtcbiAgICBiYWNrZ3JvdW5kU3Ryb2tlID0gJ3RyYW5zcGFyZW50JztcbiAgICBiYWNrZ3JvdW5kU3Ryb2tlV2lkdGggPSAwO1xuICAgIGJhY2tncm91bmRQYWRkaW5nID0gNTtcbiAgICBwZXJjZW50ID0gMDtcbiAgICByYWRpdXMgPSA5MDtcbiAgICBzcGFjZSA9IDQ7XG4gICAgdG9GaXhlZCA9IDA7XG4gICAgbWF4UGVyY2VudCA9IDEwMDA7XG4gICAgcmVuZGVyT25DbGljayA9IHRydWU7XG4gICAgdW5pdHMgPSAnJSc7XG4gICAgdW5pdHNGb250U2l6ZSA9ICcxMCc7XG4gICAgdW5pdHNGb250V2VpZ2h0ID0gJ25vcm1hbCc7XG4gICAgdW5pdHNDb2xvciA9ICcjNDQ0NDQ0JztcbiAgICBvdXRlclN0cm9rZUdyYWRpZW50ID0gZmFsc2U7XG4gICAgb3V0ZXJTdHJva2VXaWR0aCA9IDg7XG4gICAgb3V0ZXJTdHJva2VDb2xvciA9ICcjNzhDMDAwJztcbiAgICBvdXRlclN0cm9rZUdyYWRpZW50U3RvcENvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgICBvdXRlclN0cm9rZUxpbmVjYXAgPSAncm91bmQnO1xuICAgIGlubmVyU3Ryb2tlQ29sb3IgPSAnI0M3RTU5Nic7XG4gICAgaW5uZXJTdHJva2VXaWR0aCA9IDQ7XG4gICAgdGl0bGVGb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgdGl0bGU6IHN0cmluZyB8IEFycmF5PFN0cmluZz4gPSAnYXV0byc7XG4gICAgdGl0bGVDb2xvciA9ICcjNDQ0NDQ0JztcbiAgICB0aXRsZUZvbnRTaXplID0gJzIwJztcbiAgICB0aXRsZUZvbnRXZWlnaHQgPSAnbm9ybWFsJztcbiAgICBzdWJ0aXRsZUZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICBzdWJ0aXRsZTogc3RyaW5nIHwgQXJyYXk8U3RyaW5nPiA9ICdwcm9ncmVzcyc7XG4gICAgc3VidGl0bGVDb2xvciA9ICcjQTlBOUE5JztcbiAgICBzdWJ0aXRsZUZvbnRTaXplID0gJzEwJztcbiAgICBzdWJ0aXRsZUZvbnRXZWlnaHQgPSAnbm9ybWFsJztcbiAgICBpbWFnZVNyYyA9IHVuZGVmaW5lZDtcbiAgICBpbWFnZUhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICBpbWFnZVdpZHRoID0gdW5kZWZpbmVkO1xuICAgIGFuaW1hdGlvbiA9IHRydWU7XG4gICAgYW5pbWF0ZVRpdGxlID0gdHJ1ZTtcbiAgICBhbmltYXRlU3VidGl0bGUgPSBmYWxzZTtcbiAgICBhbmltYXRpb25EdXJhdGlvbiA9IDUwMDtcbiAgICBzaG93VGl0bGUgPSB0cnVlO1xuICAgIHNob3dTdWJ0aXRsZSA9IHRydWU7XG4gICAgc2hvd1VuaXRzID0gdHJ1ZTtcbiAgICBzaG93SW1hZ2UgPSBmYWxzZTtcbiAgICBzaG93QmFja2dyb3VuZCA9IHRydWU7XG4gICAgc2hvd0lubmVyU3Ryb2tlID0gdHJ1ZTtcbiAgICBjbG9ja3dpc2UgPSB0cnVlO1xuICAgIHJlc3BvbnNpdmUgPSBmYWxzZTtcbiAgICBzdGFydEZyb21aZXJvID0gdHJ1ZTtcbiAgICBzaG93WmVyb091dGVyU3Ryb2tlID0gdHJ1ZTtcbiAgICBsYXp5ID0gZmFsc2U7XG59XG5cbi8qKiBAZHluYW1pYyBQcmV2ZW50IGNvbXBpbGluZyBlcnJvciB3aGVuIHVzaW5nIHR5cGUgYERvY3VtZW50YCBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMDM1MSAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjaXJjbGUtcHJvZ3Jlc3MnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICpuZ0lmPVwic3ZnXCJcbiAgICAgICAgICAgICBbYXR0ci52aWV3Qm94XT1cInN2Zy52aWV3Qm94XCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkIG1lZXRcIlxuICAgICAgICAgICAgIFthdHRyLmhlaWdodF09XCJzdmcuaGVpZ2h0XCIgW2F0dHIud2lkdGhdPVwic3ZnLndpZHRoXCIgKGNsaWNrKT1cImVtaXRDbGlja0V2ZW50KCRldmVudClcIiBbYXR0ci5jbGFzc109XCJvcHRpb25zLmNsYXNzXCI+XG4gICAgICAgICAgICA8ZGVmcz5cbiAgICAgICAgICAgICAgICA8bGluZWFyR3JhZGllbnQgKm5nSWY9XCJvcHRpb25zLm91dGVyU3Ryb2tlR3JhZGllbnRcIiBbYXR0ci5pZF09XCJzdmcub3V0ZXJMaW5lYXJHcmFkaWVudC5pZFwiPlxuICAgICAgICAgICAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCI1JVwiIFthdHRyLnN0b3AtY29sb3JdPVwic3ZnLm91dGVyTGluZWFyR3JhZGllbnQuY29sb3JTdG9wMVwiICBbYXR0ci5zdG9wLW9wYWNpdHldPVwiMVwiLz5cbiAgICAgICAgICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiOTUlXCIgW2F0dHIuc3RvcC1jb2xvcl09XCJzdmcub3V0ZXJMaW5lYXJHcmFkaWVudC5jb2xvclN0b3AyXCIgW2F0dHIuc3RvcC1vcGFjaXR5XT1cIjFcIi8+XG4gICAgICAgICAgICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgICAgICAgICAgICAgICA8cmFkaWFsR3JhZGllbnQgKm5nSWY9XCJvcHRpb25zLmJhY2tncm91bmRHcmFkaWVudFwiIFthdHRyLmlkXT1cInN2Zy5yYWRpYWxHcmFkaWVudC5pZFwiPlxuICAgICAgICAgICAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCI1JVwiIFthdHRyLnN0b3AtY29sb3JdPVwic3ZnLnJhZGlhbEdyYWRpZW50LmNvbG9yU3RvcDFcIiBbYXR0ci5zdG9wLW9wYWNpdHldPVwiMVwiLz5cbiAgICAgICAgICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiOTUlXCIgW2F0dHIuc3RvcC1jb2xvcl09XCJzdmcucmFkaWFsR3JhZGllbnQuY29sb3JTdG9wMlwiIFthdHRyLnN0b3Atb3BhY2l0eV09XCIxXCIvPlxuICAgICAgICAgICAgICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgICAgICAgICA8L2RlZnM+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwib3B0aW9ucy5zaG93QmFja2dyb3VuZFwiPlxuICAgICAgICAgICAgICAgIDxjaXJjbGUgKm5nSWY9XCIhb3B0aW9ucy5iYWNrZ3JvdW5kR3JhZGllbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuY3hdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuY3hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuY3ldPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuY3lcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIucl09XCJzdmcuYmFja2dyb3VuZENpcmNsZS5yXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZpbGxdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuZmlsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5maWxsLW9wYWNpdHldPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuZmlsbE9wYWNpdHlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuc3Ryb2tlXT1cInN2Zy5iYWNrZ3JvdW5kQ2lyY2xlLnN0cm9rZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5zdHJva2Utd2lkdGhdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuc3Ryb2tlV2lkdGhcIi8+XG4gICAgICAgICAgICAgICAgPGNpcmNsZSAqbmdJZj1cIm9wdGlvbnMuYmFja2dyb3VuZEdyYWRpZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmN4XT1cInN2Zy5iYWNrZ3JvdW5kQ2lyY2xlLmN4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmN5XT1cInN2Zy5iYWNrZ3JvdW5kQ2lyY2xlLmN5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnJdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuclwiXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyLmZpbGw9XCJ1cmwoe3t3aW5kb3cubG9jYXRpb24uaHJlZn19I3t7c3ZnLnJhZGlhbEdyYWRpZW50LmlkfX0pXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZpbGwtb3BhY2l0eV09XCJzdmcuYmFja2dyb3VuZENpcmNsZS5maWxsT3BhY2l0eVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5zdHJva2VdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuc3Ryb2tlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnN0cm9rZS13aWR0aF09XCJzdmcuYmFja2dyb3VuZENpcmNsZS5zdHJva2VXaWR0aFwiLz5cbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGNpcmNsZSAqbmdJZj1cIm9wdGlvbnMuc2hvd0lubmVyU3Ryb2tlXCJcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuY3hdPVwic3ZnLmNpcmNsZS5jeFwiXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmN5XT1cInN2Zy5jaXJjbGUuY3lcIlxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5yXT1cInN2Zy5jaXJjbGUuclwiXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmZpbGxdPVwic3ZnLmNpcmNsZS5maWxsXCJcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuc3Ryb2tlXT1cInN2Zy5jaXJjbGUuc3Ryb2tlXCJcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuc3Ryb2tlLXdpZHRoXT1cInN2Zy5jaXJjbGUuc3Ryb2tlV2lkdGhcIi8+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiK29wdGlvbnMucGVyY2VudCE9PTAgfHwgb3B0aW9ucy5zaG93WmVyb091dGVyU3Ryb2tlXCI+XG4gICAgICAgICAgICAgICAgPHBhdGggKm5nSWY9XCIhb3B0aW9ucy5vdXRlclN0cm9rZUdyYWRpZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmRdPVwic3ZnLnBhdGguZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5zdHJva2VdPVwic3ZnLnBhdGguc3Ryb2tlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnN0cm9rZS13aWR0aF09XCJzdmcucGF0aC5zdHJva2VXaWR0aFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5zdHJva2UtbGluZWNhcF09XCJzdmcucGF0aC5zdHJva2VMaW5lY2FwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZpbGxdPVwic3ZnLnBhdGguZmlsbFwiLz5cbiAgICAgICAgICAgICAgICA8cGF0aCAqbmdJZj1cIm9wdGlvbnMub3V0ZXJTdHJva2VHcmFkaWVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5kXT1cInN2Zy5wYXRoLmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci5zdHJva2U9XCJ1cmwoe3t3aW5kb3cubG9jYXRpb24uaHJlZn19I3t7c3ZnLm91dGVyTGluZWFyR3JhZGllbnQuaWR9fSlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuc3Ryb2tlLXdpZHRoXT1cInN2Zy5wYXRoLnN0cm9rZVdpZHRoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnN0cm9rZS1saW5lY2FwXT1cInN2Zy5wYXRoLnN0cm9rZUxpbmVjYXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZmlsbF09XCJzdmcucGF0aC5maWxsXCIvPlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8dGV4dCAqbmdJZj1cIiFvcHRpb25zLnNob3dJbWFnZSAmJiAob3B0aW9ucy5zaG93VGl0bGUgfHwgb3B0aW9ucy5zaG93VW5pdHMgfHwgb3B0aW9ucy5zaG93U3VidGl0bGUpXCJcbiAgICAgICAgICAgICAgICAgIGFsaWdubWVudC1iYXNlbGluZT1cImJhc2VsaW5lXCJcbiAgICAgICAgICAgICAgICAgIFthdHRyLnhdPVwic3ZnLmNpcmNsZS5jeFwiXG4gICAgICAgICAgICAgICAgICBbYXR0ci55XT1cInN2Zy5jaXJjbGUuY3lcIlxuICAgICAgICAgICAgICAgICAgW2F0dHIudGV4dC1hbmNob3JdPVwic3ZnLnRpdGxlLnRleHRBbmNob3JcIj5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwib3B0aW9ucy5zaG93VGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRzcGFuICpuZ0Zvcj1cImxldCB0c3BhbiBvZiBzdmcudGl0bGUudHNwYW5zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnhdPVwic3ZnLnRpdGxlLnhcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIueV09XCJzdmcudGl0bGUueVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5keV09XCJ0c3Bhbi5keVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5mb250LXNpemVdPVwic3ZnLnRpdGxlLmZvbnRTaXplXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZvbnQtd2VpZ2h0XT1cInN2Zy50aXRsZS5mb250V2VpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZpbGxdPVwic3ZnLnRpdGxlLmNvbG9yXCI+e3t0c3Bhbi5zcGFufX08L3RzcGFuPlxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDx0c3BhbiAqbmdJZj1cIm9wdGlvbnMuc2hvd1VuaXRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZm9udC1zaXplXT1cInN2Zy51bml0cy5mb250U2l6ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZvbnQtd2VpZ2h0XT1cInN2Zy51bml0cy5mb250V2VpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZmlsbF09XCJzdmcudW5pdHMuY29sb3JcIj57e3N2Zy51bml0cy50ZXh0fX08L3RzcGFuPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJvcHRpb25zLnNob3dTdWJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICA8dHNwYW4gKm5nRm9yPVwibGV0IHRzcGFuIG9mIHN2Zy5zdWJ0aXRsZS50c3BhbnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIueF09XCJzdmcuc3VidGl0bGUueFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci55XT1cInN2Zy5zdWJ0aXRsZS55XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmR5XT1cInRzcGFuLmR5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZvbnQtc2l6ZV09XCJzdmcuc3VidGl0bGUuZm9udFNpemVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZm9udC13ZWlnaHRdPVwic3ZnLnN1YnRpdGxlLmZvbnRXZWlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZmlsbF09XCJzdmcuc3VidGl0bGUuY29sb3JcIj57e3RzcGFuLnNwYW59fTwvdHNwYW4+XG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8L3RleHQ+XG4gICAgICAgICAgICA8aW1hZ2UgKm5nSWY9XCJvcHRpb25zLnNob3dJbWFnZVwiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJub25lXCIgXG4gICAgICAgICAgICAgICAgW2F0dHIuaGVpZ2h0XT1cInN2Zy5pbWFnZS5oZWlnaHRcIlxuICAgICAgICAgICAgICAgIFthdHRyLndpZHRoXT1cInN2Zy5pbWFnZS53aWR0aFwiXG4gICAgICAgICAgICAgICAgW2F0dHIueGxpbms6aHJlZl09XCJzdmcuaW1hZ2Uuc3JjXCJcbiAgICAgICAgICAgICAgICBbYXR0ci54XT1cInN2Zy5pbWFnZS54XCJcbiAgICAgICAgICAgICAgICBbYXR0ci55XT1cInN2Zy5pbWFnZS55XCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvc3ZnPlxuICAgIGBcbn0pXG5leHBvcnQgY2xhc3MgQ2lyY2xlUHJvZ3Jlc3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIEBPdXRwdXQoKSBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcbiAgICBASW5wdXQoKSBjbGFzczogc3RyaW5nO1xuICAgIEBJbnB1dCgpIGJhY2tncm91bmRHcmFkaWVudDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBASW5wdXQoKSBiYWNrZ3JvdW5kR3JhZGllbnRTdG9wQ29sb3I6IFN0cmluZztcbiAgICBASW5wdXQoKSBiYWNrZ3JvdW5kT3BhY2l0eTogbnVtYmVyO1xuICAgIEBJbnB1dCgpIGJhY2tncm91bmRTdHJva2U6IHN0cmluZztcbiAgICBASW5wdXQoKSBiYWNrZ3JvdW5kU3Ryb2tlV2lkdGg6IG51bWJlcjtcbiAgICBASW5wdXQoKSBiYWNrZ3JvdW5kUGFkZGluZzogbnVtYmVyO1xuXG4gICAgQElucHV0KCkgcmFkaXVzOiBudW1iZXI7XG4gICAgQElucHV0KCkgc3BhY2U6IG51bWJlcjtcbiAgICBASW5wdXQoKSBwZXJjZW50OiBudW1iZXI7XG4gICAgQElucHV0KCkgdG9GaXhlZDogbnVtYmVyO1xuICAgIEBJbnB1dCgpIG1heFBlcmNlbnQ6IG51bWJlcjtcbiAgICBASW5wdXQoKSByZW5kZXJPbkNsaWNrOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgdW5pdHM6IHN0cmluZztcbiAgICBASW5wdXQoKSB1bml0c0ZvbnRTaXplOiBzdHJpbmc7XG4gICAgQElucHV0KCkgdW5pdHNGb250V2VpZ2h0OiBzdHJpbmc7XG4gICAgQElucHV0KCkgdW5pdHNDb2xvcjogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgb3V0ZXJTdHJva2VHcmFkaWVudDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBvdXRlclN0cm9rZVdpZHRoOiBudW1iZXI7XG4gICAgQElucHV0KCkgb3V0ZXJTdHJva2VDb2xvcjogc3RyaW5nO1xuICAgIEBJbnB1dCgpIG91dGVyU3Ryb2tlR3JhZGllbnRTdG9wQ29sb3I6IFN0cmluZztcbiAgICBASW5wdXQoKSBvdXRlclN0cm9rZUxpbmVjYXA6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGlubmVyU3Ryb2tlQ29sb3I6IHN0cmluZztcbiAgICBASW5wdXQoKSBpbm5lclN0cm9rZVdpZHRoOiBzdHJpbmcgfCBudW1iZXI7XG5cbiAgICBASW5wdXQoKSB0aXRsZUZvcm1hdDogRnVuY3Rpb247XG4gICAgQElucHV0KCkgdGl0bGU6IHN0cmluZyB8IEFycmF5PFN0cmluZz47XG4gICAgQElucHV0KCkgdGl0bGVDb2xvcjogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHRpdGxlRm9udFNpemU6IHN0cmluZztcbiAgICBASW5wdXQoKSB0aXRsZUZvbnRXZWlnaHQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIHN1YnRpdGxlRm9ybWF0OiBGdW5jdGlvbjtcbiAgICBASW5wdXQoKSBzdWJ0aXRsZTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgQElucHV0KCkgc3VidGl0bGVDb2xvcjogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHN1YnRpdGxlRm9udFNpemU6IHN0cmluZztcbiAgICBASW5wdXQoKSBzdWJ0aXRsZUZvbnRXZWlnaHQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGltYWdlU3JjOiBzdHJpbmc7XG4gICAgQElucHV0KCkgaW1hZ2VIZWlnaHQ6IG51bWJlcjtcbiAgICBASW5wdXQoKSBpbWFnZVdpZHRoOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKSBhbmltYXRpb246IGJvb2xlYW47XG4gICAgQElucHV0KCkgYW5pbWF0ZVRpdGxlOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGFuaW1hdGVTdWJ0aXRsZTogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBhbmltYXRpb25EdXJhdGlvbjogbnVtYmVyO1xuXG4gICAgQElucHV0KCkgc2hvd1RpdGxlOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHNob3dTdWJ0aXRsZTogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBzaG93VW5pdHM6IGJvb2xlYW47XG4gICAgQElucHV0KCkgc2hvd0ltYWdlOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHNob3dCYWNrZ3JvdW5kOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHNob3dJbm5lclN0cm9rZTogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBjbG9ja3dpc2U6IGJvb2xlYW47XG4gICAgQElucHV0KCkgcmVzcG9uc2l2ZTogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBzdGFydEZyb21aZXJvOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHNob3daZXJvT3V0ZXJTdHJva2U6IGJvb2xlYW47XG4gICAgXG4gICAgQElucHV0KCkgbGF6eTogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgnb3B0aW9ucycpIHRlbXBsYXRlT3B0aW9uczogQ2lyY2xlUHJvZ3Jlc3NPcHRpb25zO1xuXG4gICAgLy8gPHN2Zz4gb2YgY29tcG9uZW50XG4gICAgc3ZnRWxlbWVudDogSFRNTEVsZW1lbnQgPSBudWxsO1xuICAgIC8vIHdoZXRoZXIgPHN2Zz4gaXMgaW4gdmlld3BvcnRcbiAgICBpc0luVmlld3BvcnQ6IEJvb2xlYW4gPSBmYWxzZTtcbiAgICAvLyBldmVudCBmb3Igbm90aWZ5aW5nIHZpZXdwb3J0IGNoYW5nZSBjYXVzZWQgYnkgc2Nyb2xsaW5nIG9yIHJlc2l6aW5nXG4gICAgb25WaWV3cG9ydENoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7b2xkVmFsdWU6IEJvb2xlYW4sIG5ld1ZhbHVlOiBCb29sZWFufT4gPSBuZXcgRXZlbnRFbWl0dGVyO1xuICAgIHdpbmRvdzogV2luZG93O1xuICAgIF92aWV3cG9ydENoYW5nZWRTdWJzY3JpYmVyOiBTdWJzY3JpcHRpb24gPSBudWxsO1xuXG4gICAgc3ZnOiBhbnk7XG5cbiAgICBvcHRpb25zOiBDaXJjbGVQcm9ncmVzc09wdGlvbnMgPSBuZXcgQ2lyY2xlUHJvZ3Jlc3NPcHRpb25zKCk7XG4gICAgZGVmYXVsdE9wdGlvbnM6IENpcmNsZVByb2dyZXNzT3B0aW9ucyA9IG5ldyBDaXJjbGVQcm9ncmVzc09wdGlvbnMoKTtcbiAgICBfbGFzdFBlcmNlbnQ6IG51bWJlciA9IDA7XG4gICAgX2dyYWRpZW50VVVJRDogc3RyaW5nID0gbnVsbDtcbiAgICByZW5kZXIgPSAoKSA9PiB7XG5cbiAgICAgICAgdGhpcy5hcHBseU9wdGlvbnMoKTtcblxuICAgICAgICBpZih0aGlzLm9wdGlvbnMubGF6eSl7XG4gICAgICAgICAgICAvLyBEcmF3IHN2ZyBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgICB0aGlzLnN2Z0VsZW1lbnQgPT09IG51bGwgJiYgdGhpcy5kcmF3KHRoaXMuX2xhc3RQZXJjZW50KTtcbiAgICAgICAgICAgIC8vIERyYXcgaXQgb25seSB3aGVuIGl0J3MgaW4gdGhlIHZpZXdwb3J0XG4gICAgICAgICAgICBpZih0aGlzLmlzSW5WaWV3cG9ydCl7XG4gICAgICAgICAgICAgICAgLy8gRHJhdyBpdCBhdCB0aGUgbGF0ZXN0IHBvc2l0aW9uIHdoZW4gSSBhbSBpbi5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbiAmJiB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSh0aGlzLl9sYXN0UGVyY2VudCwgdGhpcy5vcHRpb25zLnBlcmNlbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdyh0aGlzLm9wdGlvbnMucGVyY2VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RQZXJjZW50ID0gdGhpcy5vcHRpb25zLnBlcmNlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbiAmJiB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24gPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlKHRoaXMuX2xhc3RQZXJjZW50LCB0aGlzLm9wdGlvbnMucGVyY2VudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhdyh0aGlzLm9wdGlvbnMucGVyY2VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sYXN0UGVyY2VudCA9IHRoaXMub3B0aW9ucy5wZXJjZW50O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBwb2xhclRvQ2FydGVzaWFuID0gKGNlbnRlclg6IG51bWJlciwgY2VudGVyWTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgYW5nbGVJbkRlZ3JlZXM6IG51bWJlcikgPT4ge1xuICAgICAgICBsZXQgYW5nbGVJblJhZGl1cyA9IGFuZ2xlSW5EZWdyZWVzICogTWF0aC5QSSAvIDE4MDtcbiAgICAgICAgbGV0IHggPSBjZW50ZXJYICsgTWF0aC5zaW4oYW5nbGVJblJhZGl1cykgKiByYWRpdXM7XG4gICAgICAgIGxldCB5ID0gY2VudGVyWSAtIE1hdGguY29zKGFuZ2xlSW5SYWRpdXMpICogcmFkaXVzO1xuICAgICAgICByZXR1cm4ge3g6IHgsIHk6IHl9O1xuICAgIH07XG4gICAgZHJhdyA9IChwZXJjZW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgLy8gbWFrZSBwZXJjZW50IHJlYXNvbmFibGVcbiAgICAgICAgcGVyY2VudCA9IChwZXJjZW50ID09PSB1bmRlZmluZWQpID8gdGhpcy5vcHRpb25zLnBlcmNlbnQgOiBNYXRoLmFicyhwZXJjZW50KTtcbiAgICAgICAgLy8gY2lyY2xlIHBlcmNlbnQgc2hvdWxkbid0IGJlIGdyZWF0ZXIgdGhhbiAxMDAlLlxuICAgICAgICBsZXQgY2lyY2xlUGVyY2VudCA9IChwZXJjZW50ID4gMTAwKSA/IDEwMCA6IHBlcmNlbnQ7XG4gICAgICAgIC8vIGRldGVybWluZSBib3ggc2l6ZVxuICAgICAgICBsZXQgYm94U2l6ZSA9IHRoaXMub3B0aW9ucy5yYWRpdXMgKiAyICsgdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlV2lkdGggKiAyO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dCYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICBib3hTaXplICs9ICh0aGlzLm9wdGlvbnMuYmFja2dyb3VuZFN0cm9rZVdpZHRoICogMiArIHRoaXMubWF4KDAsIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kUGFkZGluZyAqIDIpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGUgY2VudHJlIG9mIHRoZSBjaXJjbGVcbiAgICAgICAgbGV0IGNlbnRyZSA9IHt4OiBib3hTaXplIC8gMiwgeTogYm94U2l6ZSAvIDJ9O1xuICAgICAgICAvLyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGFyY1xuICAgICAgICBsZXQgc3RhcnRQb2ludCA9IHt4OiBjZW50cmUueCwgeTogY2VudHJlLnkgLSB0aGlzLm9wdGlvbnMucmFkaXVzfTtcbiAgICAgICAgLy8gZ2V0IHRoZSBlbmQgcG9pbnQgb2YgdGhlIGFyY1xuICAgICAgICBsZXQgZW5kUG9pbnQgPSB0aGlzLnBvbGFyVG9DYXJ0ZXNpYW4oY2VudHJlLngsIGNlbnRyZS55LCB0aGlzLm9wdGlvbnMucmFkaXVzLCAzNjAgKiAodGhpcy5vcHRpb25zLmNsb2Nrd2lzZSA/XG4gICAgICAgICAgICBjaXJjbGVQZXJjZW50IDpcbiAgICAgICAgICAgICgxMDAgLSBjaXJjbGVQZXJjZW50KSkgLyAxMDApOyAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgICAgICAgLy8gV2UnbGwgZ2V0IGFuIGVuZCBwb2ludCB3aXRoIHRoZSBzYW1lIFt4LCB5XSBhcyB0aGUgc3RhcnQgcG9pbnQgd2hlbiBwZXJjZW50IGlzIDEwMCUsIHNvIG1vdmUgeCBhIGxpdHRsZSBiaXQuXG4gICAgICAgIGlmIChjaXJjbGVQZXJjZW50ID09PSAxMDApIHtcbiAgICAgICAgICAgIGVuZFBvaW50LnggPSBlbmRQb2ludC54ICsgKHRoaXMub3B0aW9ucy5jbG9ja3dpc2UgPyAtMC4wMSA6ICswLjAxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsYXJnZUFyY0ZsYWcgYW5kIHN3ZWVwRmxhZ1xuICAgICAgICBsZXQgbGFyZ2VBcmNGbGFnOiBhbnksIHN3ZWVwRmxhZzogYW55O1xuICAgICAgICBpZiAoY2lyY2xlUGVyY2VudCA+IDUwKSB7XG4gICAgICAgICAgICBbbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWddID0gdGhpcy5vcHRpb25zLmNsb2Nrd2lzZSA/IFsxLCAxXSA6IFsxLCAwXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFtsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZ10gPSB0aGlzLm9wdGlvbnMuY2xvY2t3aXNlID8gWzAsIDFdIDogWzAsIDBdO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBlcmNlbnQgbWF5IG5vdCBlcXVhbCB0aGUgYWN0dWFsIHBlcmNlbnRcbiAgICAgICAgbGV0IHRpdGxlUGVyY2VudCA9IHRoaXMub3B0aW9ucy5hbmltYXRlVGl0bGUgPyBwZXJjZW50IDogdGhpcy5vcHRpb25zLnBlcmNlbnQ7XG4gICAgICAgIGxldCB0aXRsZVRleHRQZXJjZW50ID0gdGl0bGVQZXJjZW50ID4gdGhpcy5vcHRpb25zLm1heFBlcmNlbnQgP1xuICAgICAgICAgICAgYCR7dGhpcy5vcHRpb25zLm1heFBlcmNlbnQudG9GaXhlZCh0aGlzLm9wdGlvbnMudG9GaXhlZCl9K2AgOiB0aXRsZVBlcmNlbnQudG9GaXhlZCh0aGlzLm9wdGlvbnMudG9GaXhlZCk7XG4gICAgICAgIGxldCBzdWJ0aXRsZVBlcmNlbnQgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZVN1YnRpdGxlID8gcGVyY2VudCA6IHRoaXMub3B0aW9ucy5wZXJjZW50O1xuICAgICAgICAvLyBnZXQgdGl0bGUgb2JqZWN0XG4gICAgICAgIGxldCB0aXRsZSA9IHtcbiAgICAgICAgICAgIHg6IGNlbnRyZS54LFxuICAgICAgICAgICAgeTogY2VudHJlLnksXG4gICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLm9wdGlvbnMudGl0bGVDb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiB0aGlzLm9wdGlvbnMudGl0bGVGb250U2l6ZSxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IHRoaXMub3B0aW9ucy50aXRsZUZvbnRXZWlnaHQsXG4gICAgICAgICAgICB0ZXh0czogW10sXG4gICAgICAgICAgICB0c3BhbnM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIC8vIGZyb20gdjAuOS45LCBib3RoIHRpdGxlIGFuZCB0aXRsZUZvcm1hdCguLi4pIG1heSBiZSBhbiBhcnJheSBvZiBzdHJpbmcuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudGl0bGVGb3JtYXQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLm9wdGlvbnMudGl0bGVGb3JtYXQuY29uc3RydWN0b3IubmFtZSA9PT0gJ0Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbGV0IGZvcm1hdHRlZCA9IHRoaXMub3B0aW9ucy50aXRsZUZvcm1hdCh0aXRsZVBlcmNlbnQpO1xuICAgICAgICAgICAgaWYgKGZvcm1hdHRlZCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdGl0bGUudGV4dHMgPSBbLi4uZm9ybWF0dGVkXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGl0bGUudGV4dHMucHVzaChmb3JtYXR0ZWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRpdGxlID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgICB0aXRsZS50ZXh0cy5wdXNoKHRpdGxlVGV4dFBlcmNlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRpdGxlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUudGV4dHMgPSBbLi4udGhpcy5vcHRpb25zLnRpdGxlXVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlLnRleHRzLnB1c2godGhpcy5vcHRpb25zLnRpdGxlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBnZXQgc3VidGl0bGUgb2JqZWN0XG4gICAgICAgIGxldCBzdWJ0aXRsZSA9IHtcbiAgICAgICAgICAgIHg6IGNlbnRyZS54LFxuICAgICAgICAgICAgeTogY2VudHJlLnksXG4gICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLm9wdGlvbnMuc3VidGl0bGVDb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiB0aGlzLm9wdGlvbnMuc3VidGl0bGVGb250U2l6ZSxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IHRoaXMub3B0aW9ucy5zdWJ0aXRsZUZvbnRXZWlnaHQsXG4gICAgICAgICAgICB0ZXh0czogW10sXG4gICAgICAgICAgICB0c3BhbnM6IFtdXG4gICAgICAgIH1cbiAgICAgICAgLy8gZnJvbSB2MC45LjksIGJvdGggc3VidGl0bGUgYW5kIHN1YnRpdGxlRm9ybWF0KC4uLikgbWF5IGJlIGFuIGFycmF5IG9mIHN0cmluZy5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdWJ0aXRsZUZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIHRoaXMub3B0aW9ucy5zdWJ0aXRsZUZvcm1hdC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnRnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBsZXQgZm9ybWF0dGVkID0gdGhpcy5vcHRpb25zLnN1YnRpdGxlRm9ybWF0KHN1YnRpdGxlUGVyY2VudCk7XG4gICAgICAgICAgICBpZiAoZm9ybWF0dGVkIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZS50ZXh0cyA9IFsuLi5mb3JtYXR0ZWRdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZS50ZXh0cy5wdXNoKGZvcm1hdHRlZC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VidGl0bGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIHN1YnRpdGxlLnRleHRzID0gWy4uLnRoaXMub3B0aW9ucy5zdWJ0aXRsZV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VidGl0bGUudGV4dHMucHVzaCh0aGlzLm9wdGlvbnMuc3VidGl0bGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZ2V0IHVuaXRzIG9iamVjdFxuICAgICAgICBsZXQgdW5pdHMgPSB7XG4gICAgICAgICAgICB0ZXh0OiBgJHt0aGlzLm9wdGlvbnMudW5pdHN9YCxcbiAgICAgICAgICAgIGZvbnRTaXplOiB0aGlzLm9wdGlvbnMudW5pdHNGb250U2l6ZSxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IHRoaXMub3B0aW9ucy51bml0c0ZvbnRXZWlnaHQsXG4gICAgICAgICAgICBjb2xvcjogdGhpcy5vcHRpb25zLnVuaXRzQ29sb3JcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZ2V0IHRvdGFsIGNvdW50IG9mIHRleHQgbGluZXMgdG8gYmUgc2hvd25cbiAgICAgICAgbGV0IHJvd0NvdW50ID0gMCwgcm93TnVtID0gMTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dUaXRsZSAmJiAocm93Q291bnQgKz0gdGl0bGUudGV4dHMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dTdWJ0aXRsZSAmJiAocm93Q291bnQgKz0gc3VidGl0bGUudGV4dHMubGVuZ3RoKTtcbiAgICAgICAgLy8gY2FsYyBkeSBmb3IgZWFjaCB0c3BhbiBmb3IgdGl0bGVcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93VGl0bGUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHNwYW4gb2YgdGl0bGUudGV4dHMpIHtcbiAgICAgICAgICAgICAgICB0aXRsZS50c3BhbnMucHVzaCh7c3Bhbjogc3BhbiwgZHk6IHRoaXMuZ2V0UmVsYXRpdmVZKHJvd051bSwgcm93Q291bnQpfSk7XG4gICAgICAgICAgICAgICAgcm93TnVtKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsYyBkeSBmb3IgZWFjaCB0c3BhbiBmb3Igc3VidGl0bGVcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93U3VidGl0bGUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHNwYW4gb2Ygc3VidGl0bGUudGV4dHMpIHtcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZS50c3BhbnMucHVzaCh7c3Bhbjogc3BhbiwgZHk6IHRoaXMuZ2V0UmVsYXRpdmVZKHJvd051bSwgcm93Q291bnQpfSlcbiAgICAgICAgICAgICAgICByb3dOdW0rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjcmVhdGUgSUQgZm9yIGdyYWRpZW50IGVsZW1lbnRcbiAgICAgICAgaWYgKG51bGwgPT09IHRoaXMuX2dyYWRpZW50VVVJRCl7XG4gICAgICAgICAgICB0aGlzLl9ncmFkaWVudFVVSUQgPSB0aGlzLnV1aWQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBCcmluZyBpdCBhbGwgdG9nZXRoZXJcbiAgICAgICAgdGhpcy5zdmcgPSB7XG4gICAgICAgICAgICB2aWV3Qm94OiBgMCAwICR7Ym94U2l6ZX0gJHtib3hTaXplfWAsXG4gICAgICAgICAgICAvLyBTZXQgYm90aCB3aWR0aCBhbmQgaGVpZ2h0IHRvICcxMDAlJyBpZiBpdCdzIHJlc3BvbnNpdmVcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSA/ICcxMDAlJyA6IGJveFNpemUsXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMub3B0aW9ucy5yZXNwb25zaXZlID8gJzEwMCUnIDogYm94U2l6ZSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDaXJjbGU6IHtcbiAgICAgICAgICAgICAgICBjeDogY2VudHJlLngsXG4gICAgICAgICAgICAgICAgY3k6IGNlbnRyZS55LFxuICAgICAgICAgICAgICAgIHI6IHRoaXMub3B0aW9ucy5yYWRpdXMgKyB0aGlzLm9wdGlvbnMub3V0ZXJTdHJva2VXaWR0aCAvIDIgKyB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZFBhZGRpbmcsXG4gICAgICAgICAgICAgICAgZmlsbDogdGhpcy5vcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogdGhpcy5vcHRpb25zLmJhY2tncm91bmRPcGFjaXR5LFxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5vcHRpb25zLmJhY2tncm91bmRTdHJva2UsXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kU3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDoge1xuICAgICAgICAgICAgICAgIC8vIEEgcnggcnkgeC1heGlzLXJvdGF0aW9uIGxhcmdlLWFyYy1mbGFnIHN3ZWVwLWZsYWcgeCB5IChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9TVkcvVHV0b3JpYWwvUGF0aHMjQXJjcylcbiAgICAgICAgICAgICAgICBkOiBgTSAke3N0YXJ0UG9pbnQueH0gJHtzdGFydFBvaW50Lnl9XG4gICAgICAgIEEgJHt0aGlzLm9wdGlvbnMucmFkaXVzfSAke3RoaXMub3B0aW9ucy5yYWRpdXN9IDAgJHtsYXJnZUFyY0ZsYWd9ICR7c3dlZXBGbGFnfSAke2VuZFBvaW50Lnh9ICR7ZW5kUG9pbnQueX1gLFxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHRoaXMub3B0aW9ucy5vdXRlclN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICAgIHN0cm9rZUxpbmVjYXA6IHRoaXMub3B0aW9ucy5vdXRlclN0cm9rZUxpbmVjYXAsXG4gICAgICAgICAgICAgICAgZmlsbDogJ25vbmUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2lyY2xlOiB7XG4gICAgICAgICAgICAgICAgY3g6IGNlbnRyZS54LFxuICAgICAgICAgICAgICAgIGN5OiBjZW50cmUueSxcbiAgICAgICAgICAgICAgICByOiB0aGlzLm9wdGlvbnMucmFkaXVzIC0gdGhpcy5vcHRpb25zLnNwYWNlIC0gdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlV2lkdGggLyAyIC0gdGhpcy5vcHRpb25zLmlubmVyU3Ryb2tlV2lkdGggLyAyLFxuICAgICAgICAgICAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMub3B0aW9ucy5pbm5lclN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiB0aGlzLm9wdGlvbnMuaW5uZXJTdHJva2VXaWR0aCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICB1bml0czogdW5pdHMsXG4gICAgICAgICAgICBzdWJ0aXRsZTogc3VidGl0bGUsXG4gICAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgICAgIHg6IGNlbnRyZS54IC0gdGhpcy5vcHRpb25zLmltYWdlV2lkdGggLyAyLFxuICAgICAgICAgICAgICAgIHk6IGNlbnRyZS55IC0gdGhpcy5vcHRpb25zLmltYWdlSGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICBzcmM6IHRoaXMub3B0aW9ucy5pbWFnZVNyYyxcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5vcHRpb25zLmltYWdlV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLm9wdGlvbnMuaW1hZ2VIZWlnaHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3V0ZXJMaW5lYXJHcmFkaWVudDoge1xuICAgICAgICAgICAgICAgIGlkOiAnb3V0ZXItbGluZWFyLScgKyB0aGlzLl9ncmFkaWVudFVVSUQsXG4gICAgICAgICAgICAgICAgY29sb3JTdG9wMTogdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICAgICAgY29sb3JTdG9wMjogdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlR3JhZGllbnRTdG9wQ29sb3IgPT09ICd0cmFuc3BhcmVudCcgPyAnI0ZGRicgOiB0aGlzLm9wdGlvbnMub3V0ZXJTdHJva2VHcmFkaWVudFN0b3BDb2xvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByYWRpYWxHcmFkaWVudDoge1xuICAgICAgICAgICAgICAgIGlkOiAncmFkaWFsLScgKyB0aGlzLl9ncmFkaWVudFVVSUQsXG4gICAgICAgICAgICAgICAgY29sb3JTdG9wMTogdGhpcy5vcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBjb2xvclN0b3AyOiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZEdyYWRpZW50U3RvcENvbG9yID09PSAndHJhbnNwYXJlbnQnID8gJyNGRkYnIDogdGhpcy5vcHRpb25zLmJhY2tncm91bmRHcmFkaWVudFN0b3BDb2xvcixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGdldEFuaW1hdGlvblBhcmFtZXRlcnMgPSAocHJldmlvdXNQZXJjZW50OiBudW1iZXIsIGN1cnJlbnRQZXJjZW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgTUlOX0lOVEVSVkFMID0gMTA7XG4gICAgICAgIGxldCB0aW1lczogbnVtYmVyLCBzdGVwOiBudW1iZXIsIGludGVydmFsOiBudW1iZXI7XG4gICAgICAgIGxldCBmcm9tUGVyY2VudCA9IHRoaXMub3B0aW9ucy5zdGFydEZyb21aZXJvID8gMCA6IChwcmV2aW91c1BlcmNlbnQgPCAwID8gMCA6IHByZXZpb3VzUGVyY2VudCk7XG4gICAgICAgIGxldCB0b1BlcmNlbnQgPSBjdXJyZW50UGVyY2VudCA8IDAgPyAwIDogdGhpcy5taW4oY3VycmVudFBlcmNlbnQsIHRoaXMub3B0aW9ucy5tYXhQZXJjZW50KTtcbiAgICAgICAgbGV0IGRlbHRhID0gTWF0aC5hYnMoTWF0aC5yb3VuZCh0b1BlcmNlbnQgLSBmcm9tUGVyY2VudCkpO1xuXG4gICAgICAgIGlmIChkZWx0YSA+PSAxMDApIHtcbiAgICAgICAgICAgIC8vIHdlIHdpbGwgZmluaXNoIGFuaW1hdGlvbiBpbiAxMDAgdGltZXNcbiAgICAgICAgICAgIHRpbWVzID0gMTAwO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYW5pbWF0ZVRpdGxlICYmICF0aGlzLm9wdGlvbnMuYW5pbWF0ZVN1YnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgc3RlcCA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHNob3cgdGl0bGUgb3Igc3VidGl0bGUgYW5pbWF0aW9uIGV2ZW4gaWYgdGhlIGFyYyBpcyBmdWxsLCB3ZSBhbHNvIG5lZWQgdG8gZmluaXNoIGl0IGluIDEwMCB0aW1lcy5cbiAgICAgICAgICAgICAgICBzdGVwID0gTWF0aC5yb3VuZChkZWx0YSAvIHRpbWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHdlIHdpbGwgZmluaXNoIGluIGFzIG1hbnkgdGltZXMgYXMgdGhlIG51bWJlciBvZiBwZXJjZW50LlxuICAgICAgICAgICAgdGltZXMgPSBkZWx0YTtcbiAgICAgICAgICAgIHN0ZXAgPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdldCB0aGUgaW50ZXJ2YWwgb2YgdGltZXJcbiAgICAgICAgaW50ZXJ2YWwgPSBNYXRoLnJvdW5kKHRoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbiAvIHRpbWVzKTtcbiAgICAgICAgLy8gUmVhZGp1c3QgYWxsIHZhbHVlcyBpZiB0aGUgaW50ZXJ2YWwgb2YgdGltZXIgaXMgZXh0cmVtZWx5IHNtYWxsLlxuICAgICAgICBpZiAoaW50ZXJ2YWwgPCBNSU5fSU5URVJWQUwpIHtcbiAgICAgICAgICAgIGludGVydmFsID0gTUlOX0lOVEVSVkFMO1xuICAgICAgICAgICAgdGltZXMgPSB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24gLyBpbnRlcnZhbDtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGVUaXRsZSAmJiAhdGhpcy5vcHRpb25zLmFuaW1hdGVTdWJ0aXRsZSAmJiBkZWx0YSA+IDEwMCkge1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLnJvdW5kKDEwMCAvIHRpbWVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGgucm91bmQoZGVsdGEgLyB0aW1lcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RlcCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLlxuICAgICAgICBpZiAoc3RlcCA8IDEpIHtcbiAgICAgICAgICAgIHN0ZXAgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7dGltZXM6IHRpbWVzLCBzdGVwOiBzdGVwLCBpbnRlcnZhbDogaW50ZXJ2YWx9O1xuICAgIH07XG4gICAgYW5pbWF0ZSA9IChwcmV2aW91c1BlcmNlbnQ6IG51bWJlciwgY3VycmVudFBlcmNlbnQ6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAodGhpcy5fdGltZXJTdWJzY3JpcHRpb24gJiYgIXRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5fdGltZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZnJvbVBlcmNlbnQgPSB0aGlzLm9wdGlvbnMuc3RhcnRGcm9tWmVybyA/IDAgOiBwcmV2aW91c1BlcmNlbnQ7XG4gICAgICAgIGxldCB0b1BlcmNlbnQgPSBjdXJyZW50UGVyY2VudDtcbiAgICAgICAgbGV0IHtzdGVwOiBzdGVwLCBpbnRlcnZhbDogaW50ZXJ2YWx9ID0gdGhpcy5nZXRBbmltYXRpb25QYXJhbWV0ZXJzKGZyb21QZXJjZW50LCB0b1BlcmNlbnQpO1xuICAgICAgICBsZXQgY291bnQgPSBmcm9tUGVyY2VudDtcbiAgICAgICAgaWYoZnJvbVBlcmNlbnQgPCB0b1BlcmNlbnQpe1xuICAgICAgICAgICAgdGhpcy5fdGltZXJTdWJzY3JpcHRpb24gPSB0aW1lcigwLCBpbnRlcnZhbCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb3VudCArPSBzdGVwO1xuICAgICAgICAgICAgICAgIGlmIChjb3VudCA8PSB0b1BlcmNlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYW5pbWF0ZVRpdGxlICYmICF0aGlzLm9wdGlvbnMuYW5pbWF0ZVN1YnRpdGxlICYmIGNvdW50ID49IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KHRvUGVyY2VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KGNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdyh0b1BlcmNlbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uID0gdGltZXIoMCwgaW50ZXJ2YWwpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY291bnQgLT0gc3RlcDtcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPj0gdG9QZXJjZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGVUaXRsZSAmJiAhdGhpcy5vcHRpb25zLmFuaW1hdGVTdWJ0aXRsZSAmJiB0b1BlcmNlbnQgPj0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcodG9QZXJjZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcoY291bnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KHRvUGVyY2VudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGVtaXRDbGlja0V2ZW50ID0gKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW5kZXJPbkNsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGUoMCwgdGhpcy5vcHRpb25zLnBlcmNlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DbGljay5lbWl0KGV2ZW50KTtcbiAgICB9O1xuICAgIHByaXZhdGUgX3RpbWVyU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBhcHBseU9wdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgIC8vIHRoZSBvcHRpb25zIG9mIDxjaXJjbGUtcHJvZ3Jlc3M+IG1heSBjaGFuZ2UgYWxyZWFkeVxuICAgICAgICBmb3IgKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucykpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHRoaXNbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1tuYW1lXSA9IHRoaXNbbmFtZV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGVtcGxhdGVPcHRpb25zICYmIHRoaXMudGVtcGxhdGVPcHRpb25zW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbbmFtZV0gPSB0aGlzLnRlbXBsYXRlT3B0aW9uc1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBtYWtlIHN1cmUga2V5IG9wdGlvbnMgdmFsaWRcbiAgICAgICAgdGhpcy5vcHRpb25zLnJhZGl1cyA9IE1hdGguYWJzKCt0aGlzLm9wdGlvbnMucmFkaXVzKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnNwYWNlID0gK3RoaXMub3B0aW9ucy5zcGFjZTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnBlcmNlbnQgPSArdGhpcy5vcHRpb25zLnBlcmNlbnQgPiAwID8gK3RoaXMub3B0aW9ucy5wZXJjZW50IDogMDtcbiAgICAgICAgdGhpcy5vcHRpb25zLm1heFBlcmNlbnQgPSBNYXRoLmFicygrdGhpcy5vcHRpb25zLm1heFBlcmNlbnQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24gPSBNYXRoLmFicyh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICB0aGlzLm9wdGlvbnMub3V0ZXJTdHJva2VXaWR0aCA9IE1hdGguYWJzKCt0aGlzLm9wdGlvbnMub3V0ZXJTdHJva2VXaWR0aCk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5pbm5lclN0cm9rZVdpZHRoID0gTWF0aC5hYnMoK3RoaXMub3B0aW9ucy5pbm5lclN0cm9rZVdpZHRoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmJhY2tncm91bmRQYWRkaW5nID0gK3RoaXMub3B0aW9ucy5iYWNrZ3JvdW5kUGFkZGluZztcbiAgICB9O1xuICAgIHByaXZhdGUgZ2V0UmVsYXRpdmVZID0gKHJvd051bTogbnVtYmVyLCByb3dDb3VudDogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgICAgICAgLy8gd2h5ICctMC4xOGVtJz8gSXQncyBhIG1hZ2ljIG51bWJlciB3aGVuIHByb3BlcnR5ICdhbGlnbm1lbnQtYmFzZWxpbmUnIGVxdWFscyAnYmFzZWxpbmUnLiA6KVxuICAgICAgICBsZXQgaW5pdGlhbE9mZnNldCA9IC0wLjE4LCBvZmZzZXQgPSAxO1xuICAgICAgICByZXR1cm4gKGluaXRpYWxPZmZzZXQgKyBvZmZzZXQgKiAocm93TnVtIC0gcm93Q291bnQgLyAyKSkudG9GaXhlZCgyKSArICdlbSc7XG4gICAgfTtcblxuICAgIHByaXZhdGUgbWluID0gKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiB7XG4gICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG1heCA9IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gYSA+IGIgPyBhIDogYjtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB1dWlkID0gKCkgPT4ge1xuICAgICAgICAvLyBodHRwczovL3d3dy53M3Jlc291cmNlLmNvbS9qYXZhc2NyaXB0LWV4ZXJjaXNlcy9qYXZhc2NyaXB0LW1hdGgtZXhlcmNpc2UtMjMucGhwXG4gICAgICAgIHZhciBkdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgdXVpZCA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgdmFyIHIgPSAoZHQgKyBNYXRoLnJhbmRvbSgpKjE2KSUxNiB8IDA7XG4gICAgICAgICAgICBkdCA9IE1hdGguZmxvb3IoZHQvMTYpO1xuICAgICAgICAgICAgcmV0dXJuIChjPT0neCcgPyByIDoociYweDN8MHg4KSkudG9TdHJpbmcoMTYpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHV1aWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGlzRHJhd2luZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl90aW1lclN1YnNjcmlwdGlvbiAmJiAhdGhpcy5fdGltZXJTdWJzY3JpcHRpb24uY2xvc2VkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmluZFN2Z0VsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYodGhpcy5zdmdFbGVtZW50ID09PSBudWxsKXtcbiAgICAgICAgICAgIGxldCB0YWdzID0gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdmcnKTtcbiAgICAgICAgICAgIGlmKHRhZ3MubGVuZ3RoPjApe1xuICAgICAgICAgICAgICAgIHRoaXMuc3ZnRWxlbWVudCA9IHRhZ3NbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRWxlbWVudEluVmlld3BvcnQgKGVsKSA6IEJvb2xlYW4ge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgaWYgZWwgaGFzIG5vdCBiZWVuIGNyZWF0ZWQgaW4gcGFnZS5cbiAgICAgICAgaWYoZWwgPT09IG51bGwgfHwgZWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZWxlbWVudCBpcyBvdXQgb2YgdmlldyBkdWUgdG8gYSBjb250YWluZXIgc2Nyb2xsaW5nXG4gICAgICAgIGxldCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHBhcmVudCA9IGVsLnBhcmVudE5vZGUsIHBhcmVudFJlY3Q7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBwYXJlbnRSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIGlmIChyZWN0LnRvcCA+PSBwYXJlbnRSZWN0LmJvdHRvbSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGlmIChyZWN0LmJvdHRvbSA8PSBwYXJlbnRSZWN0LnRvcCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGlmIChyZWN0LmxlZnQgPj0gcGFyZW50UmVjdC5yaWdodCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGlmIChyZWN0LnJpZ2h0IDw9IHBhcmVudFJlY3QubGVmdCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgICB9IHdoaWxlIChwYXJlbnQgIT0gdGhpcy5kb2N1bWVudC5ib2R5KTtcbiAgICAgICAgLy8gQ2hlY2sgaXRzIHdpdGhpbiB0aGUgZG9jdW1lbnQgdmlld3BvcnRcbiAgICAgICAgaWYgKHJlY3QudG9wID49ICh0aGlzLndpbmRvdy5pbm5lckhlaWdodCB8fCB0aGlzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChyZWN0LmJvdHRvbSA8PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChyZWN0LmxlZnQgPj0gKHRoaXMud2luZG93LmlubmVyV2lkdGggfHwgdGhpcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChyZWN0LnJpZ2h0IDw9IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY2hlY2tWaWV3cG9ydCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5maW5kU3ZnRWxlbWVudCgpO1xuICAgICAgICBsZXQgcHJldmlvdXNWYWx1ZSA9IHRoaXMuaXNJblZpZXdwb3J0O1xuICAgICAgICB0aGlzLmlzSW5WaWV3cG9ydCA9IHRoaXMuaXNFbGVtZW50SW5WaWV3cG9ydCh0aGlzLnN2Z0VsZW1lbnQpO1xuICAgICAgICBpZihwcmV2aW91c1ZhbHVlICE9PSB0aGlzLmlzSW5WaWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5vblZpZXdwb3J0Q2hhbmdlZC5lbWl0KHtvbGRWYWx1ZTogcHJldmlvdXNWYWx1ZSwgbmV3VmFsdWU6IHRoaXMuaXNJblZpZXdwb3J0fSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblNjcm9sbCA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5jaGVja1ZpZXdwb3J0KCk7XG4gICAgfVxuXG4gICAgbG9hZEV2ZW50c0ZvckxhenlNb2RlID0gKCkgPT4ge1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMubGF6eSl7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblNjcm9sbCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZih0aGlzLl92aWV3cG9ydENoYW5nZWRTdWJzY3JpYmVyID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3cG9ydENoYW5nZWRTdWJzY3JpYmVyID0gdGhpcy5vblZpZXdwb3J0Q2hhbmdlZC5zdWJzY3JpYmUoKHtvbGRWYWx1ZSwgbmV3VmFsdWV9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID8gdGhpcy5yZW5kZXIoKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzdmdFbGVtZW50IG11c3QgYmUgY3JlYXRlZCBpbiBET00gYmVmb3JlIGJlaW5nIGNoZWNrZWQuXG4gICAgICAgICAgICAvLyBJcyB0aGVyZSBhIGJldHRlciB3YXkgdG8gY2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBzdmdFbGVtbnQ/XG4gICAgICAgICAgICBsZXQgX3RpbWVyID0gdGltZXIoMCwgNTApLnN1YnNjcmliZSgoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuc3ZnRWxlbWVudCA9PT0gbnVsbCA/IHRoaXMuY2hlY2tWaWV3cG9ydCgpIDogX3RpbWVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdW5sb2FkRXZlbnRzRm9yTGF6eU1vZGUgPSAoKSA9PiB7XG4gICAgICAgIC8vIFJlbW92ZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcbiAgICAgICAgdGhpcy53aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblNjcm9sbCwgdHJ1ZSk7XG4gICAgICAgIC8vIFVuc3Vic2NyaWJlIG9uVmlld3BvcnRDaGFuZ2VkXG4gICAgICAgIGlmKHRoaXMuX3ZpZXdwb3J0Q2hhbmdlZFN1YnNjcmliZXIgIT09IG51bGwpe1xuICAgICAgICAgICAgdGhpcy5fdmlld3BvcnRDaGFuZ2VkU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5fdmlld3BvcnRDaGFuZ2VkU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpe1xuICAgICAgICB0aGlzLmxvYWRFdmVudHNGb3JMYXp5TW9kZSgpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCl7XG4gICAgICAgIHRoaXMudW5sb2FkRXZlbnRzRm9yTGF6eU1vZGUoKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuXG4gICAgICAgIGlmKCdsYXp5JyBpbiBjaGFuZ2VzKXtcbiAgICAgICAgICAgIGNoYW5nZXMubGF6eS5jdXJyZW50VmFsdWUgPyB0aGlzLmxvYWRFdmVudHNGb3JMYXp5TW9kZSgpIDogdGhpcy51bmxvYWRFdmVudHNGb3JMYXp5TW9kZSgpO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgXG4gICAgY29uc3RydWN0b3IoZGVmYXVsdE9wdGlvbnM6IENpcmNsZVByb2dyZXNzT3B0aW9ucywgcHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZiwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55KSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICAgICAgdGhpcy53aW5kb3cgPSB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgZGVmYXVsdE9wdGlvbnMpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZGVmYXVsdE9wdGlvbnMsIGRlZmF1bHRPcHRpb25zKTtcbiAgICB9XG5cbn1cbiJdfQ==